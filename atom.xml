<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Xjt5213&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.xjt5213.club/"/>
  <updated>2019-07-28T03:06:05.779Z</updated>
  <id>https://www.xjt5213.club/</id>
  
  <author>
    <name>xjt5213</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>谈谈css hack</title>
    <link href="https://www.xjt5213.club/2019/07/28/%E8%B0%88%E8%B0%88css%20hack/"/>
    <id>https://www.xjt5213.club/2019/07/28/谈谈css hack/</id>
    <published>2019-07-27T16:00:00.000Z</published>
    <updated>2019-07-28T03:06:05.779Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是CSS-Hack"><a href="#什么是CSS-Hack" class="headerlink" title="什么是CSS Hack??"></a>什么是CSS Hack??</h3><p>由于不同厂商的浏览器或某浏览器的不同版本（如IE6-IE11,Firefox/Safari/Opera/Chrome等），对CSS的支持、解析不一样，导致在不同浏览器的环境中呈现出不一致的页面展现效果。这时，我们为了获得统一的页面效果，就需要针对不同的浏览器或不同版本写特定的CSS样式，我们把这个针对不同的浏览器/不同版本写相应的CSS code的过程，叫做CSS hack!</p><h3 id="CSS-Hack的原理？？"><a href="#CSS-Hack的原理？？" class="headerlink" title="CSS Hack的原理？？"></a>CSS Hack的原理？？</h3><p>由于不同的浏览器和浏览器各版本对CSS的支持及解析结果不一样，以及CSS优先级对浏览器展现效果的影响，我们可以据此针对不同的浏览器情景来应用不同的CSS。</p><h3 id="CSS-Hack分类"><a href="#CSS-Hack分类" class="headerlink" title="CSS Hack分类"></a>CSS Hack分类</h3><p>CSS Hack大致有3种表现形式，CSS属性前缀法、选择器前缀法以及IE条件注释法（即HTML头部引用if IE）Hack，实际项目中CSS Hack大部分是针对IE浏览器不同版本之间的表现差异而引入的。</p><ul><li>属性前缀法(即类内部Hack)：例如 IE6能识别下划线”<em>“和星号” <em> “，IE7能识别星号” </em> “，但不能识别下划线”</em>“，IE6~IE10都认识”\9”，但firefox前述三个都不能认识。</li><li>选择器前缀法(即选择器Hack)：例如 IE6能识别<em>html .class{}，IE7能识别</em>+html .class{}或者*:first-child+html .class{}。</li><li>IE条件注释法(即HTML条件注释Hack)：针对所有IE(注：IE10+已经不再支持条件注释)： <!--[if IE]>IE浏览器显示的内容 <![endif]-->，针对IE6及以下版本： <!--[if lt IE 6]>只在IE6-显示的内容 <![endif]-->。这类Hack不仅对CSS生效，对写在判断语句里面的所有代码都会生效。</li></ul><p>CSS hack书写顺序，一般是将适用范围广、被识别能力强的CSS定义在前面。</p><h3 id="CSS-Hack方式一：条件注释法"><a href="#CSS-Hack方式一：条件注释法" class="headerlink" title="CSS Hack方式一：条件注释法"></a>CSS Hack方式一：条件注释法</h3><p>这种方式是ie浏览器专有的hack方式，微软官方推荐使用的hack方式，使用如下：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">只在<span class="selector-tag">IE</span>下生效</span><br><span class="line">&lt;!<span class="selector-tag">--</span><span class="selector-attr">[if IE]</span>&gt;</span><br><span class="line">这段文字只在<span class="selector-tag">IE</span>浏览器显示</span><br><span class="line">&lt;!<span class="selector-attr">[endif]</span><span class="selector-tag">--</span>&gt;</span><br><span class="line"></span><br><span class="line">只在<span class="selector-tag">IE6</span>下生效</span><br><span class="line">&lt;!<span class="selector-tag">--</span><span class="selector-attr">[if IE 6]</span>&gt;</span><br><span class="line">这段文字只在<span class="selector-tag">IE6</span>浏览器显示</span><br><span class="line">&lt;!<span class="selector-attr">[endif]</span><span class="selector-tag">--</span>&gt;</span><br><span class="line"></span><br><span class="line">只在<span class="selector-tag">IE6</span>以上版本生效</span><br><span class="line">&lt;!<span class="selector-tag">--</span><span class="selector-attr">[if gte IE 6]</span>&gt;</span><br><span class="line">这段文字只在<span class="selector-tag">IE6</span>以上(包括)版本<span class="selector-tag">IE</span>浏览器显示</span><br><span class="line">&lt;!<span class="selector-attr">[endif]</span><span class="selector-tag">--</span>&gt;</span><br><span class="line"></span><br><span class="line">只在<span class="selector-tag">IE8</span>上不生效</span><br><span class="line">&lt;!<span class="selector-tag">--</span><span class="selector-attr">[if ! IE 8]</span>&gt;</span><br><span class="line">这段文字在非<span class="selector-tag">IE8</span>浏览器显示</span><br><span class="line">&lt;!<span class="selector-attr">[endif]</span><span class="selector-tag">--</span>&gt;</span><br><span class="line"></span><br><span class="line">非<span class="selector-tag">IE</span>浏览器生效</span><br><span class="line">&lt;!<span class="selector-tag">--</span><span class="selector-attr">[if !IE]</span>&gt;</span><br><span class="line">这段文字只在非<span class="selector-tag">IE</span>浏览器显示</span><br><span class="line">&lt;!<span class="selector-attr">[endif]</span><span class="selector-tag">--</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="CSS-Hack方式二：类内属性前缀法"><a href="#CSS-Hack方式二：类内属性前缀法" class="headerlink" title="CSS Hack方式二：类内属性前缀法"></a>CSS Hack方式二：类内属性前缀法</h3><p>属性前缀法是在CSS样式属性名前加上一些只有特定浏览器才能识别的hack前缀，以达到预期的页面展现效果。</p><p>IE浏览器个版本CSS Hack对照表</p><p><img src="https://www.img423.xyz/img/pic31.jpg" alt="pic31"></p><p>说明：在标准模式中</p><ul><li>“-″减号是IE6专有的hack</li><li>“\9″ IE6/IE7/IE8/IE9/IE10都生效</li><li>“\0″ IE8/IE9/IE10都生效，是IE8/9/10的hack</li><li>“\9\0″ 只对IE9/IE10生效，是IE9/10的hack</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="actionscript"><span class="comment">//alert(document.compatMode);</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-tag">body</span><span class="selector-pseudo">:nth-of-type(1)</span> <span class="selector-class">.iehack</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">color</span>: <span class="selector-id">#F00</span>;<span class="comment">/* 对Windows IE9/Firefox 7+/Opera 10+/所有Chrome/Safari的CSS hack ，选择器也适用几乎全部Mobile/Linux/Mac browser*/</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.demo1</span>,<span class="selector-class">.demo2</span>,<span class="selector-class">.demo3</span>,<span class="selector-class">.demo4</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">width</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="css"><span class="selector-tag">height</span><span class="selector-pseudo">:100px</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.hack</span>&#123;</span></span><br><span class="line"><span class="css"><span class="comment">/*demo1 */</span></span></span><br><span class="line"><span class="css"><span class="comment">/*demo1 注意顺序，否则IE6/7下可能无法正确显示，导致结果显示为白色背景*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:red</span>; <span class="comment">/* All browsers */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:blue</span> !<span class="selector-tag">important</span>;<span class="comment">/* All browsers but IE6 */</span></span></span><br><span class="line"><span class="css">*<span class="selector-tag">background-color</span><span class="selector-pseudo">:black</span>; <span class="comment">/* IE6, IE7 */</span></span></span><br><span class="line"><span class="css">+<span class="selector-tag">background-color</span><span class="selector-pseudo">:yellow</span>;<span class="comment">/* IE6, IE7*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:gray</span>\9; <span class="comment">/* IE6, IE7, IE8, IE9, IE10 */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:purple</span>\0; <span class="comment">/* IE8, IE9, IE10 */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:orange</span>\9\0;<span class="comment">/*IE9, IE10*/</span></span></span><br><span class="line"><span class="css">_<span class="selector-tag">background-color</span><span class="selector-pseudo">:green</span>; <span class="comment">/* Only works in IE6 */</span></span></span><br><span class="line"><span class="css">*+<span class="selector-tag">background-color</span><span class="selector-pseudo">:pink</span>; <span class="comment">/*  WARNING: Only works in IE7 ? Is it right? */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css"><span class="comment">/*可以通过javascript检测IE10，然后给IE10的&lt;html&gt;标签加上class=”ie10″ 这个类 */</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.ie10</span> <span class="selector-id">#hack</span>&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">color</span><span class="selector-pseudo">:red</span>; <span class="comment">/* Only works in IE10 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css"><span class="comment">/*demo2*/</span></span></span><br><span class="line"><span class="css"><span class="selector-class">.iehack</span>&#123;</span></span><br><span class="line"><span class="undefined">/*该demo实例是用于区分标准模式下ie6~ie9和Firefox/Chrome的hack，注意顺序</span></span><br><span class="line"><span class="undefined">IE6显示为：绿色，</span></span><br><span class="line"><span class="undefined">IE7显示为：黑色，</span></span><br><span class="line"><span class="undefined">IE8显示为：红色，</span></span><br><span class="line"><span class="undefined">IE9显示为：蓝色，</span></span><br><span class="line"><span class="undefined">Firefox/Chrome显示为：橘色，</span></span><br><span class="line"><span class="undefined">（本例IE10效果同IE9,Opera最新版效果同IE8）</span></span><br><span class="line"><span class="undefined">*/</span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:orange</span>;  <span class="comment">/* all - for Firefox/Chrome */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:red</span>\0;  <span class="comment">/* ie 8/9/10/Opera - for ie8/ie10/Opera */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:blue</span>\9\0;  <span class="comment">/* ie 9/10 - for ie9/10 */</span></span></span><br><span class="line"><span class="css">*<span class="selector-tag">background-color</span><span class="selector-pseudo">:black</span>;  <span class="comment">/* ie 6/7 - for ie7 */</span></span></span><br><span class="line"><span class="css">_<span class="selector-tag">background-color</span><span class="selector-pseudo">:green</span>;  <span class="comment">/* ie 6 - for ie6 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="undefined">/*demo3</span></span><br><span class="line"><span class="undefined">实例是用于区分标准模式下ie6~ie9和Firefox/Chrome的hack，注意顺序</span></span><br><span class="line"><span class="undefined">IE6显示为：红色，</span></span><br><span class="line"><span class="undefined">IE7显示为：蓝色，</span></span><br><span class="line"><span class="undefined">IE8显示为：绿色，</span></span><br><span class="line"><span class="undefined">IE9显示为：粉色，</span></span><br><span class="line"><span class="undefined">Firefox/Chrome显示为：橘色，</span></span><br><span class="line"><span class="undefined">（本例IE10效果同IE9，Opera最新版效果也同IE9为粉色）</span></span><br><span class="line"><span class="undefined">*/</span></span><br><span class="line"><span class="css"><span class="selector-class">.element</span> &#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:orange</span>;<span class="comment">/* all IE/FF/CH/OP*/</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.element</span> &#123;</span></span><br><span class="line"><span class="css">*<span class="selector-tag">background-color</span>: <span class="selector-tag">blue</span>;    <span class="comment">/* IE6+7, doesn't work in IE8/9 as IE7 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.element</span> &#123;</span></span><br><span class="line"><span class="css">_<span class="selector-tag">background-color</span>: <span class="selector-tag">red</span>;     <span class="comment">/* IE6 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-class">.element</span> &#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span>: <span class="selector-tag">green</span>\0; <span class="comment">/* IE8+9+10  */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-pseudo">:root</span> <span class="selector-class">.element</span> &#123; <span class="attribute">background-color</span>:pink\<span class="number">0</span>; &#125;  <span class="comment">/* IE9+10 */</span></span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css"><span class="comment">/*demo4*/</span></span></span><br><span class="line"><span class="undefined">/*</span></span><br><span class="line"><span class="undefined">该实例是用于区分标准模式下ie6~ie10和Opera/Firefox/Chrome的hack，本例特别要注意顺序</span></span><br><span class="line"><span class="undefined">IE6显示为：橘色，</span></span><br><span class="line"><span class="undefined">IE7显示为：粉色，</span></span><br><span class="line"><span class="undefined">IE8显示为：黄色，</span></span><br><span class="line"><span class="undefined">IE9显示为：紫色，</span></span><br><span class="line"><span class="undefined">IE10显示为：绿色，</span></span><br><span class="line"><span class="undefined">Firefox显示为：蓝色，</span></span><br><span class="line"><span class="undefined">Opera显示为：黑色，</span></span><br><span class="line"><span class="undefined">Safari/Chrome显示为：灰色，</span></span><br><span class="line"><span class="undefined">*/</span></span><br><span class="line"><span class="css"><span class="selector-class">.hacktest</span>&#123; </span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:blue</span>;      <span class="comment">/* 都识别，此处针对firefox */</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:red</span>\9;      <span class="comment">/*all ie*/</span></span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:yellow</span>\0;    <span class="comment">/*for IE8/IE9/10 最新版opera也认识*/</span></span></span><br><span class="line"><span class="css">+<span class="selector-tag">background-color</span><span class="selector-pseudo">:pink</span>;        <span class="comment">/*for ie6/7*/</span></span></span><br><span class="line"><span class="css">_<span class="selector-tag">background-color</span><span class="selector-pseudo">:orange</span>;       <span class="comment">/*for ie6*/</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css">@<span class="keyword">media</span> screen and (min-width:<span class="number">0</span>)&#123; </span></span><br><span class="line"><span class="css"><span class="selector-class">.hacktest</span> &#123;<span class="attribute">background-color</span>:black\<span class="number">0</span>;&#125;  <span class="comment">/*opera*/</span></span></span><br><span class="line"><span class="undefined">&#125; </span></span><br><span class="line"><span class="css">@<span class="keyword">media</span> screen and (min-width:<span class="number">0</span>) &#123; </span></span><br><span class="line"><span class="css">    <span class="selector-class">.hacktest</span> &#123; <span class="attribute">background-color</span>:purple\<span class="number">9</span>; &#125;<span class="comment">/*  for IE9/IE10  PS:国外有些习惯常写作\0，根本没考虑Opera也认识\0的实际 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css">@<span class="keyword">media</span> screen and (-ms-high-contrast: active), (-ms-high-contrast: none) &#123; </span></span><br><span class="line"><span class="css">   <span class="selector-class">.hacktest</span> &#123; <span class="attribute">background-color</span>:green; &#125; <span class="comment">/* for IE10+ 此写法可以适配到高对比度和默认模式，故可覆盖所有ie10的模式 */</span></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css">@<span class="keyword">media</span> screen and (-webkit-min-device-pixel-ratio:<span class="number">0</span>)&#123; <span class="selector-class">.hacktest</span> &#123;<span class="attribute">background-color</span>:gray;&#125; &#125;  <span class="comment">/*for Chrome/Safari*/</span></span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="css"><span class="comment">/* #963棕色 :root is for IE9/IE10, 优先级高于@media, 慎用！如果二者合用，必要时在@media样式加入 !important 才能区分IE9和IE10 */</span></span></span><br><span class="line"><span class="undefined">/*</span></span><br><span class="line"><span class="css"><span class="selector-pseudo">:root</span> <span class="selector-class">.hacktest</span> &#123; <span class="attribute">background-color</span>:<span class="number">#963</span>\<span class="number">9</span>; &#125; </span></span><br><span class="line"><span class="undefined">*/</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS-Hack方式三：选择器前缀法"><a href="#CSS-Hack方式三：选择器前缀法" class="headerlink" title="CSS Hack方式三：选择器前缀法"></a>CSS Hack方式三：选择器前缀法</h3><p>选择器前缀法是针对一些页面表现不一致或者需要特殊对待的浏览器，在CSS选择器前加上一些只有某些特定浏览器才能识别的前缀进行hack。</p><p>目前最常见的是</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">*<span class="selector-tag">html</span> *前缀只对IE6生效</span><br><span class="line">*+<span class="selector-tag">html</span> *+前缀只对IE7生效</span><br><span class="line">@media screen\<span class="number">9</span>&#123;...&#125;只对IE6/<span class="number">7</span>生效</span><br><span class="line">@media \<span class="number">0s</span>creen &#123;<span class="selector-tag">body</span> &#123; <span class="attribute">background</span>: red; &#125;&#125;只对IE8有效</span><br><span class="line">@media \<span class="number">0s</span>creen\,screen\<span class="number">9</span>&#123;<span class="selector-tag">body</span> &#123; <span class="attribute">background</span>: blue; &#125;&#125;只对IE6/<span class="number">7</span>/<span class="number">8</span>有效</span><br><span class="line">@media screen\<span class="number">0</span> &#123;<span class="selector-tag">body</span> &#123; <span class="attribute">background</span>: green; &#125;&#125; 只对IE8/<span class="number">9</span>/<span class="number">10</span>有效</span><br><span class="line">@media screen and (<span class="attribute">min-width</span>:<span class="number">0</span>\<span class="number">0</span>) &#123;body &#123; background: gray; &#125;&#125; 只对IE9/<span class="number">10</span>有效</span><br><span class="line">@media screen and (-ms-high-contrast: active), (-ms-high-contrast: <span class="attribute">none</span>) &#123;body &#123; background: orange; &#125;&#125; 只对IE10有效</span><br><span class="line">等等</span><br></pre></td></tr></table></figure><p><img src="https://www.img423.xyz/img/pic32.jpg" alt="pic32"></p><h3 id="css3选择器结合JavaScript的Hack"><a href="#css3选择器结合JavaScript的Hack" class="headerlink" title="css3选择器结合JavaScript的Hack"></a>css3选择器结合JavaScript的Hack</h3><p>我们用ie10进行举例</p><p>由于IE10用户代理字符串（UserAgent）为：Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; Trident/6.0)，所以我们可以使用javascript将此属性添加到文档标签中，再运用CSS3基本选择器匹配。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> htmlObj = <span class="built_in">document</span>.documentElement;</span><br><span class="line">htmlObj.setAttribute(<span class="string">'data-useragent'</span>,navigator.userAgent);</span><br><span class="line">htmlObj.setAttribute(<span class="string">'data-platform'</span>, navigator.platform );</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span><span class="selector-attr">[data-useragent*='MSIE 10.0']</span> <span class="selector-id">#id</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: <span class="number">#F00</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS-Hack利弊"><a href="#CSS-Hack利弊" class="headerlink" title="CSS Hack利弊"></a>CSS Hack利弊</h3><p>一般情况下，我们尽量避免使用CSS hack，但是有些情况为了顾及用户体验实现向下兼容，不得已才使用hack。比如由于IE8及以下版本不支持CSS3,而我们的项目页面使用了大量CSS3新属性在IE9/Firefox/Chrome下正常渲染，这种情况下如果不使用css3pie或htc或条件注释等方法时,可能就得让IE8-的专属hack出马了。使用hack虽然对页面表现的一致性有好处，但过多的滥用会造成html文档混乱不堪，增加管理和维护的负担。相信只要大家一起努力，少用、慎用hack，未来一定会促使浏览器厂商的标准越来越趋于统一，顺利过渡到标准浏览器的主流时代。抛弃那些陈旧的IE hack，必将减轻我们编码的复杂度，少做无用功。</p><p>最后补上一张引自国外某大牛总结的CSS hack表，这时一张6年前的旧知识汇总表了，放在这里仅供需要时候方便参考。</p><p><img src="https://www.img423.xyz/img/pic33.jpg" alt="pic33"></p><p>转载自CSDN freshlover的博客专栏《<a href="http://blog.csdn.net/freshlover/article/details/12132801" target="_blank" rel="noopener">史上最全CSS Hack方式一览</a>》感兴趣的朋友可以去看看。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;什么是CSS-Hack&quot;&gt;&lt;a href=&quot;#什么是CSS-Hack&quot; class=&quot;headerlink&quot; title=&quot;什么是CSS Hack??&quot;&gt;&lt;/a&gt;什么是CSS Hack??&lt;/h3&gt;&lt;p&gt;由于不同厂商的浏览器或某浏览器的不同版本（如IE6-IE11
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.xjt5213.club/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈JavaScript中原型链，prototype，__proto__的关系</title>
    <link href="https://www.xjt5213.club/2019/07/27/%E6%B5%85%E8%B0%88JavaScript%E4%B8%AD%E5%8E%9F%E5%9E%8B%E9%93%BE%EF%BC%8Cprototype%E5%92%8C__proto__%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>https://www.xjt5213.club/2019/07/27/浅谈JavaScript中原型链，prototype和__proto__的关系/</id>
    <published>2019-07-26T16:00:00.000Z</published>
    <updated>2019-07-27T09:10:11.765Z</updated>
    
    <content type="html"><![CDATA[<p><strong><strong>proto</strong>和prototype</strong></p><p><code>__proto__</code></p><p>引用《JavaScript权威指南》的一段描述</p><blockquote><p>Every JavaScript object has a second JavaScript object (or null ,<br>but this is rare) associated with it. This second object is known as a prototype, and the first object inherits properties from the prototype.</p></blockquote><p>翻译出来就是每个JS对象一定对应一个原型对象，并从原型对象继承属性和方法。好啦，既然有这么一个原型对象，那么对象怎么和它对应的？</p><p><strong>对象<strong>proto</strong>属性的值就是它所对应的的原型对象</strong></p><p>看一段代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> one = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> two = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">one.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></span><br><span class="line">two.__proto__ === <span class="built_in">Object</span>.prototype <span class="comment">// true</span></span><br><span class="line">one.toString === one.__proto__.toString <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上边代码应该已经足够清除地解释了什么是<code>__proto__</code>,好吧，显然还不够，或者说带来了新的问题？<code>Object.prototype</code>是什么？凭什么说<code>one</code>和<code>two</code>的原型就是<code>Object.prototype</code></p><p><code>prototype</code></p><p>首先来说说<code>prototype</code>属性，不想每个对象都有<code>__proto__</code>属性来标志自己所继承的原型，只有函数才有<code>prototype</code>属性,为什么只有函数才具有<code>prototype</code>属性呢？ES规范就是这么定的。</p><p>开玩笑了，其实函数在JS中真的很特殊，是所谓的<em>一等公民</em>。JS不像其它面向对象的语言，它没有类（<code>class</code>，ES6引进了这个关键字，但更多是语法糖）的概念。JS通过函数来模拟类。</p><p>当你创建一个函数时，js会为这个函数自动添加<code>prototype</code>属性，值是一个有constructor属性的对象，不是空对象，而一旦你把这个函数当做构造函数（constructor）来调用(即通过<code>new</code>关键字调用)，那么js就会帮你创建该构造函数的实例，实例继承构造函数<code>prototype</code>的所有属性和方法（实例通过设置自己的<code>__proto__</code>指向构造函数的<code>prototype</code>来实现这种继承）。</p><p><strong>小结</strong></p><p>虽然对不熟悉的人来说还有点绕，但JS正是通过<code>__proto__</code>和<code>prototype</code>的合作实现了原型链，以及对象的继承。</p><p>构造函数，通过<code>prototype</code>来存储要共享的属性和方法，也可以设置<code>prototype</code>指向现存的对象来继承该对象。</p><p>对象的<code>__proto__</code>指向自己构造函数的<code>prototype</code>。<code>obj.__proto__.__proto__...</code>的原型链由此产生，包括我们的操作符<code>instanceof</code>正是通过探测<code>obj.__proto__.__proto__... === Constructor.prototype</code>来验证<code>obj</code>是否是<code>Constructor</code>的实例。</p><p>回到开头的代码，<code>two = new Object()</code>中<code>Object</code>是构造函数，所以<code>two.__proto__</code>就是<code>Object.prototype</code>。至于<code>one</code>，ES规范定义对象字面量的原型就是<code>Object.prototype</code>。</p><h3 id="更深一步的探讨"><a href="#更深一步的探讨" class="headerlink" title="更深一步的探讨"></a>更深一步的探讨</h3><p>我们知道JS是单继承的，<code>Object.prototype</code>是原型链的顶端，所有对象从它继承了包括<code>toString</code>等等方法和属性。</p><p><code>Object</code>本身是构造函数，继承了<code>Function.prototype</code>;<code>Function</code>也是对象，继承了<code>Object.prototype</code>。这里就有一个<em>鸡和蛋</em>的问题：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span> <span class="keyword">instanceof</span> <span class="built_in">Function</span> <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Function</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>具体到JS，ES规范是怎么说的？</p><blockquote><p>Function<strong>本身就是函数</strong>，<code>Function.__proto__</code>是标准的内置对象<code>Function.prototype</code>。</p><p><code>Function.prototype.__proto__</code>是标准的内置对象<code>Object.prototype</code>。</p></blockquote><p>今天就先写到这儿，改天接写。。。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;&lt;strong&gt;proto&lt;/strong&gt;和prototype&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;__proto__&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;引用《JavaScript权威指南》的一段描述&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every 
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.xjt5213.club/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈JavaScript中的闭包</title>
    <link href="https://www.xjt5213.club/2019/07/27/%E6%B5%85%E8%B0%88JavaScript%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/"/>
    <id>https://www.xjt5213.club/2019/07/27/浅谈JavaScript中的闭包/</id>
    <published>2019-07-26T16:00:00.000Z</published>
    <updated>2019-07-27T10:11:02.559Z</updated>
    
    <content type="html"><![CDATA[<p>这里引用MDN的说法</p><blockquote><p>闭包是函数和声明该函数的词法环境的组合。</p></blockquote><p>创建一个闭包最常见的方式是在一个函数内部创建另一个函数，下面写一个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">0</span>;</span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">closure</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="built_in">console</span>.log(++a);</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> closure;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面例子中，<code>f1</code> 内部的匿名函数以及它能够访问到的外部函数的变量 <code>a</code> 合在一起，就形成了一个闭包。使用 <code>return</code> 将闭包返回的目的是让它可以被外部访问。下面看看它怎么使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f2 = f1();   <span class="comment">// 执行外部函数，返回闭包</span></span><br><span class="line">f2();     <span class="comment">// 2</span></span><br><span class="line">f2();     <span class="comment">// 3</span></span><br><span class="line">f2();     <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>第一句执行函数 <code>f1()</code> 后，闭包被返回并赋值给了一个全局变量 <code>f2</code>，以后每次调用 <code>f2()</code>，变量 <code>a</code> 的值就会加 <code>1</code>。通常函数执行完毕后，其作用域链和活动对象都会被销毁，为什么这里 <code>a</code> 并没有被销毁并且每次执行 <code>f2()</code> 还会被递增？原因是闭包有权访问外部函数的变量，进一步说，<strong>闭包的作用域链会引用外部函数的活动对象</strong>，所以<code>f2()</code> 在执行时，其作用域链实际上是：</p><ol><li>自身的活动对象</li><li><code>f1()</code>的活动对象</li><li>全局变量对象</li></ol><p>所以 <code>f1()</code> 执行完后，其执行环境的作用域链会被销毁，但活动对象仍然会留在内存中，因为闭包作用域链在引用这个活动对象（说白了就是闭包还需要使用外层函数的变量，不允许它们被销毁），直到闭包被销毁后，<code>f1()</code> 的活动对象才会被销毁。</p><p>上面例子中，是将返回的闭包赋值给了一个全局变量 <code>f2</code>，<code>var f2 = f1();</code>，<code>f2</code> 是不会被销毁的，每次执行完 <code>f2()</code>，闭包的作用域链不会被销毁，所以就会出现每次执行 <code>f2()</code>，<code>a</code> 递增。</p><p>但是，换一种闭包的调用方式，情况会不同：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f1()(); <span class="comment">//2</span></span><br><span class="line">f1()();  <span class="comment">//2</span></span><br></pre></td></tr></table></figure><p>因为没有把闭包赋值给一个全局变量，闭包执行完后，其执行域链与活动对象都销毁了。</p><h3 id="闭包的作用"><a href="#闭包的作用" class="headerlink" title="闭包的作用"></a>闭包的作用</h3><h4 id="1-创建用于访问私有变量的公有方法"><a href="#1-创建用于访问私有变量的公有方法" class="headerlink" title="1. 创建用于访问私有变量的公有方法"></a>1. 创建用于访问私有变量的公有方法</h4><p>其实，构造函数中定义的实例方法就是闭包：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'Leon'</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Hi!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.publicMethod = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(name);</span><br><span class="line">    <span class="keyword">return</span> sayHi();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>构造函数 <code>Person</code> 中定义实例方法<code>publicMethod()</code>就是一个闭包，它可以访问外部函数的变量 <code>name</code>和 函数 <code>sayHi()</code>，为什么要这么做呢？因为我们想在构造函数中定义一些私有变量，让外部不能直接访问，只能通过定义好的公有方法访问，从而达到保护变量，收敛外部权限的目的。</p><p>而在普通函数中，把闭包 <code>return</code> 出去供外部使用，其实目的也就是：让函数内部的变量始终保持在内存中，同时保护这些变量，让它们不能被直接访问。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">'Leon'</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="string">'Hi!'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">publicMethod</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(name);</span><br><span class="line">    <span class="keyword">return</span> sayHi();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> publicMethod;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-闭包用于创建单例"><a href="#2-闭包用于创建单例" class="headerlink" title="2. 闭包用于创建单例"></a>2. 闭包用于创建单例</h4><p>所谓单例：就是只有一个实例的对象，单例模式的好处在于：</p><ul><li>保证一个类只有一个实例，避免了一个在全局范围内使用的实例频繁创建与销毁。<ul><li>比如网页中的弹窗，点击 a 按钮弹出，点击 b 按钮隐藏，如果弹窗每一次弹出都需要新建一个对象，将会造成性能的浪费，更好的办法就是只实例化一个对象，一直使用。</li></ul></li><li>划分了命名空间，避免了与全局命名空间的冲突。<ul><li>比如在一个单例中可以定义很多方法，通过<code>单例.方法</code>来使用，避免了在全局环境中定义函数，造成函数名冲突。</li></ul></li></ul><p>下面逐步介绍一下单例的创建方式，后两种方式将用到闭包</p><h5 id="1-对象字面量创建单例"><a href="#1-对象字面量创建单例" class="headerlink" title="1. 对象字面量创建单例"></a>1. 对象字面量创建单例</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> singleton = &#123;</span><br><span class="line">  attr1: <span class="number">1</span>,</span><br><span class="line">  attr2: <span class="number">2</span>,</span><br><span class="line">  method: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.attr1 + <span class="keyword">this</span>.attr2;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> s1 = singleton;</span><br><span class="line"><span class="keyword">var</span> s2 = singleton;</span><br><span class="line"><span class="built_in">console</span>.log(s1 == s2)  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面用字面量形式创建了一个单例，可以看到 <code>s1</code> 和 <code>s2</code> 是等同的。这种方式的问题在于外部可以直接访问单例的内部变量并加以修改，如果想让单例拥有私有变量，就需要使用模块模式，模块模式就是用了闭包。</p><h5 id="2-模块模式"><a href="#2-模块模式" class="headerlink" title="2. 模块模式"></a>2. 模块模式</h5><p>JS 中的模块模式的作用是：为单例添加私有变量和公有方法。它使用立即执行函数和闭包来达到目的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> singleton = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 创建私有变量</span></span><br><span class="line">  <span class="keyword">var</span> privateNum = <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 创建私有函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">privateFunc</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(++privateNum);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回一个对象包含公有方法</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">      publicMethod: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(privateNum)</span><br><span class="line">        <span class="keyword">return</span> privateFunc()</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line">singleton.publicMethod();</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>这里首先定义了一个立即执行函数，它返回一个对象，该对象中有一个闭包 <code>publicMethod()</code>， 它可以访问外部函数的私有变量。从而这个被返回的对象就成为了单例的公共接口，外部可以通过它的公有方法访问私有变量而无权直接修改。总结一下就是两点：</p><ul><li>立即执行函数可以创建一个块级作用域， 避免在全局环境中添加变量。</li><li>闭包可以访问外层函数中的变量。</li></ul><h5 id="3-构造函数-闭包"><a href="#3-构造函数-闭包" class="headerlink" title="3. 构造函数+闭包"></a>3. 构造函数+闭包</h5><p>上面提到的对象字面是用来创建单例的方法之一，既然单例只能被实例化一次，不难想到，在使用构造函数新建实例时，先判断实例是否已被新建，未被新建则新建实例，否则直接返回已被新建的实例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Singleton = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取实例对象</span></span><br><span class="line"><span class="keyword">var</span> getInstance = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> instance = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(!instance) &#123;</span><br><span class="line">          instance = <span class="keyword">new</span> Singleton(name);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = getInstance(<span class="string">'1'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">// &#123;name: "1"&#125;</span></span><br><span class="line"><span class="keyword">var</span> b = getInstance(<span class="string">'2'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(b);  <span class="comment">// &#123;name: "1"&#125;</span></span><br></pre></td></tr></table></figure><p>这里将构造函数和实例化过程进行了分离， <code>getInstance()</code>中存在一个闭包，它可以访问到外部变量 <code>instance</code>，第一次 <code>instance = null</code>，则通过 <code>new Singleton(name)</code>新建实例，并将这个实例保存在<code>instance</code> 中，之后再想新建实例，因为闭包访问到的<code>instance</code>已经有值了，就会直接返回之前实例化的对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里引用MDN的说法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;闭包是函数和声明该函数的词法环境的组合。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;创建一个闭包最常见的方式是在一个函数内部创建另一个函数，下面写一个例子&lt;/p&gt;
&lt;figure class=&quot;highlight
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.xjt5213.club/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>浅谈圣杯布局和双飞翼布局</title>
    <link href="https://www.xjt5213.club/2019/07/27/%E6%B5%85%E8%B0%88%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E5%92%8C%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80/"/>
    <id>https://www.xjt5213.club/2019/07/27/浅谈圣杯布局和双飞翼布局/</id>
    <published>2019-07-26T16:00:00.000Z</published>
    <updated>2019-07-27T07:25:44.038Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最近面试碰到一个问题—圣杯布局和双飞翼布局，其实自己也不太明白，今天就来记录一下学习过程</strong></p><ul><li>首先圣杯布局和双飞翼布局，都属于三列布局的经典布局</li><li>圣杯布局是外国人发明的</li><li>双飞翼布局是圣杯布局的优化版，由淘宝UED提出</li><li>他们的效果很类似，但是<strong>实现方法不同</strong></li></ul><p>以下是效果图</p><p><img src="https://www.img423.xyz/img/pic21.jpg" alt="pic21"></p><p>实现步骤：</p><h4 id="1-先把HTML结构写好"><a href="#1-先把HTML结构写好" class="headerlink" title="1. 先把HTML结构写好"></a>1. 先把HTML结构写好</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-写一下上边的基本样式"><a href="#2-写一下上边的基本样式" class="headerlink" title="2. 写一下上边的基本样式"></a>2. 写一下上边的基本样式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="selector-class">.header</span> &#123;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">            <span class="attribute">background</span>: lightblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: lightcoral;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-布局正式开始，现在往main元素里面加东西"><a href="#3-布局正式开始，现在往main元素里面加东西" class="headerlink" title="3. 布局正式开始，现在往main元素里面加东西"></a>3. 布局正式开始，现在往main元素里面加东西</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左列定宽<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右列定宽<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-定义一下center，left，right的基本样式"><a href="#4-定义一下center，left，right的基本样式" class="headerlink" title="4. 定义一下center，left，right的基本样式"></a>4. 定义一下center，left，right的基本样式</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">         <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">         <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">         <span class="attribute">background</span>: lightgray;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="selector-class">.left</span> &#123;</span><br><span class="line">         <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">         <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">         <span class="attribute">background</span>: lightpink;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="selector-class">.right</span> &#123;</span><br><span class="line">         <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">         <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">         <span class="attribute">background</span>: lightgreen;</span><br><span class="line">     &#125;</span><br></pre></td></tr></table></figure><p><strong>注意到这一步，请在浏览器查看效果，出现这种效果的原因是因为，center，left，right处于文档流中，而块元素又独占一行</strong></p><h4 id="5-现在，我们让center，left，right浮动起来"><a href="#5-现在，我们让center，left，right浮动起来" class="headerlink" title="5. 现在，我们让center，left，right浮动起来"></a>5. 现在，我们让center，left，right浮动起来</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.center</span>,<span class="selector-class">.left</span>,<span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在 center、left、right 都浮动起来了，但是因为 center 的 width 为 100%，center 仍然会占满一行，所以 left 和 right 只能浮在 center 下面。</p><p><strong>注意：</strong>我们没有给 main 设置高度，它的高度本来是由里边的子元素（center、left、right） 撑起来的。但是现在子元素都设置了浮动，脱离了文档流，所以 main 的高度又变成了0，所以 footer 元素会往上跑，被浮动元素盖住。</p><h4 id="6-清除浮动，让footer回到原来的位置"><a href="#6-清除浮动，让footer回到原来的位置" class="headerlink" title="6. 清除浮动，让footer回到原来的位置"></a>6. 清除浮动，让footer回到原来的位置</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">           <span class="attribute">overflow</span>: hidden;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p><strong>清除浮动的方法这里就不再赘述，我之前的博文中有一篇是专门讲解清除浮动的，感兴趣的可以去看看</strong></p><h4 id="7-给left和right添加以下代码，让left，-center，right在同一行显示"><a href="#7-给left和right添加以下代码，让left，-center，right在同一行显示" class="headerlink" title="7. 给left和right添加以下代码，让left， center，right在同一行显示"></a>7. 给left和right添加以下代码，让left， center，right在同一行显示</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:-<span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.img423.xyz/img/pic22.jpg" alt="pic22"></p><p>我们可以看到，center上的“中间自适应”几个字不见了，很显然是因为left和right覆盖在了center上面，如果center有更多内容，依然将无法显示。</p><p>为了解决上述问题，圣杯布局和双飞翼布局采用了不同的做法。</p><p><strong>首先是圣杯布局</strong></p><ol><li><p><strong>给三列的父元素main，加上margin-left和margin-right,将三列挤到中间来，这样左边和右边就会预留出位置</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span>&#123;</span><br><span class="line">   <span class="attribute">padding-left</span>: <span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">padding-right</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p><strong>给left和right设置相对位置，将他们移动到相应的位置</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">left</span>:-<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:relative;</span><br><span class="line">    <span class="attribute">right</span>:-<span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>到这里，圣杯布局就完成了，可以在浏览器试试效果</strong></p><p>现在，返回到第7步，利用双飞翼布局来解决</p><p><strong>双飞翼布局</strong></p><ol><li><p><strong>给center加一个子元素inner</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>中间自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><ol start="2"><li><p>给inner设置margin-left和margin-right，将inner挤到中间显示</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.inner</span>&#123;</span><br><span class="line">    <span class="attribute">margin-left</span>:<span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">margin-right</span>:<span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>到这里，双飞翼布局就完成了，可以在浏览器看看效果</strong></p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;最近面试碰到一个问题—圣杯布局和双飞翼布局，其实自己也不太明白，今天就来记录一下学习过程&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先圣杯布局和双飞翼布局，都属于三列布局的经典布局&lt;/li&gt;
&lt;li&gt;圣杯布局是外国人发明的&lt;/li&gt;
&lt;li&gt;双飞翼布局是
      
    
    </summary>
    
    
      <category term="学习笔记 教程" scheme="https://www.xjt5213.club/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>vue组件间传值</title>
    <link href="https://www.xjt5213.club/2019/07/27/vue%E5%AE%9E%E7%8E%B0%E7%BB%84%E4%BB%B6%E9%97%B4%E4%BC%A0%E5%80%BC/"/>
    <id>https://www.xjt5213.club/2019/07/27/vue实现组件间传值/</id>
    <published>2019-07-26T16:00:00.000Z</published>
    <updated>2019-07-27T03:44:09.470Z</updated>
    
    <content type="html"><![CDATA[<h4 id="说到组件吗传值，无非就是父组件传子组件，子组件传父组件，兄弟组件之间传值，先来讲讲父组件传子组件的情况。"><a href="#说到组件吗传值，无非就是父组件传子组件，子组件传父组件，兄弟组件之间传值，先来讲讲父组件传子组件的情况。" class="headerlink" title="说到组件吗传值，无非就是父组件传子组件，子组件传父组件，兄弟组件之间传值，先来讲讲父组件传子组件的情况。"></a>说到组件吗传值，无非就是父组件传子组件，子组件传父组件，兄弟组件之间传值，先来讲讲父组件传子组件的情况。</h4><p>先看看下面的使用场景:父组件点击传值给子组件</p><p><img src="https://www.img423.xyz/img/pic11.jpg" alt="pic11"></p><p>在这里触发handleClick点击事件，额外声明一个clickData。点击按钮将inpMessage的值赋值给clickData，再传给子组件</p><p>父组件App.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;inpMessage&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;handleClick&quot;&gt;点击传给子组件&lt;/button&gt;</span><br><span class="line">    &lt;children :message=&quot;clickData&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import children from &apos;./components/children&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;App&apos;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    children</span><br><span class="line">  &#125;,</span><br><span class="line">  data:function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      inpMessage:&apos;&apos;,</span><br><span class="line">      clickData:&apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    handleClick()&#123;</span><br><span class="line">      this.clickData = this.inpMessage</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &apos;Avenir&apos;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>子组件：children.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; :value=&quot;message&quot;&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">      props:[&apos;message&apos;],</span><br><span class="line">        name: &quot;children&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>上面是父组件传值给子组件的过程，最重要的点是props接收，上面是点击事件传值，还有一种场景是动态传值，实时更新父组件的值，自组件动态更新，这里就要用到watch了，附上自组件代码</strong></p><p>子组件：children.vue</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"childrenMessage"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">      props:[<span class="string">'message'</span>],</span></span><br><span class="line"><span class="actionscript">        name: <span class="string">"children"</span>,</span></span><br><span class="line"><span class="actionscript">      data:<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="actionscript">          childrenMessage:<span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="undefined">      created() &#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.childrenMessage = <span class="keyword">this</span>.message</span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="actionscript">      <span class="comment">//这里用watch方法来监听父组件传过来的值，实现动态更新</span></span></span><br><span class="line"><span class="undefined">      watch:&#123;</span></span><br><span class="line"><span class="actionscript">        message(val)&#123; <span class="comment">//message即为父组件的值，val参数为值</span></span></span><br><span class="line"><span class="actionscript">          <span class="keyword">this</span>.childrenMessage = val <span class="comment">//将父组件的值赋值给childrenMessage 子组件的值</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>子组件传父组件，核心–$emit，这里附上完整父子传值的代码,vue是不允许子组件向父组件传值去改变父组件的值的，但是我们可以通过自定义事件的形式去改变值，例如点击事件，再通过$emit来传递，代码注释中有介绍。</strong></p><p>父组件：App.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;input type=&quot;text&quot; v-model=&quot;inpMessage&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;handleClick&quot;&gt;点击传给子组件&lt;/button&gt;</span><br><span class="line">&lt;!--    @messageData为子组件声明传递过来的值，函数，getData为函数，val参数是传递过来的值--&gt;</span><br><span class="line">    &lt;children :message=&quot;clickData&quot; @messageData=&quot;getData&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import children from &apos;./components/children&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;App&apos;,</span><br><span class="line">  components:&#123;</span><br><span class="line">    children</span><br><span class="line">  &#125;,</span><br><span class="line">  data:function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      inpMessage:&apos;&apos;,</span><br><span class="line">      clickData:&apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    handleClick()&#123;</span><br><span class="line">      this.clickData = this.inpMessage</span><br><span class="line">    &#125;,</span><br><span class="line">    //接收子组件传递的值，val参数是传递过来的值  ，给inpMessage 赋值，子组件改变父组件的值</span><br><span class="line">    getData(val)&#123;</span><br><span class="line">      this.inpMessage = val</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app &#123;</span><br><span class="line">  font-family: &apos;Avenir&apos;, Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>子组件：children.vue</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; v-model=&quot;childrenMessage&quot;&gt;</span><br><span class="line">  &lt;button @click=&quot;childClick&quot;&gt;传值给父组件&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">      props:[&apos;message&apos;],</span><br><span class="line">        name: &quot;children&quot;,</span><br><span class="line">      data:function () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          childrenMessage:&apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      created() &#123;</span><br><span class="line">        this.childrenMessage = this.message</span><br><span class="line">      &#125;,</span><br><span class="line">      //这里用watch方法来监听父组件传过来的值，实现动态更新</span><br><span class="line">      watch:&#123;</span><br><span class="line">        message(val)&#123; //message即为父组件的值，val参数为值</span><br><span class="line">          this.childrenMessage = val //将父组件的值赋值给childrenMessage 子组件的值</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line">        //点击传值给父组件，通过$emit传递，第一个参数messageData相当于传播的媒介，this.childrenMessage为需要传递的值，后面也可以传递多个参数</span><br><span class="line">        childClick()&#123;</span><br><span class="line">          this.$emit(&apos;messageData&apos;,this.childrenMessage)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>以上就是父子组件之前传值的一个过程，如有不明白的欢迎在下方留言，如有错误也欢迎指出，感谢！！！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;说到组件吗传值，无非就是父组件传子组件，子组件传父组件，兄弟组件之间传值，先来讲讲父组件传子组件的情况。&quot;&gt;&lt;a href=&quot;#说到组件吗传值，无非就是父组件传子组件，子组件传父组件，兄弟组件之间传值，先来讲讲父组件传子组件的情况。&quot; class=&quot;headerl
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.xjt5213.club/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>vuex使用方式</title>
    <link href="https://www.xjt5213.club/2019/07/26/vuex%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/"/>
    <id>https://www.xjt5213.club/2019/07/26/vuex使用方式/</id>
    <published>2019-07-25T16:00:00.000Z</published>
    <updated>2019-07-26T12:43:07.847Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-这段时间一直在用vue写项目，突然在网上看到一个新东西–vuex，和vue长得很像，于是就想把它弄懂，感觉在日后的开发中也有用"><a href="#1-这段时间一直在用vue写项目，突然在网上看到一个新东西–vuex，和vue长得很像，于是就想把它弄懂，感觉在日后的开发中也有用" class="headerlink" title="1 这段时间一直在用vue写项目，突然在网上看到一个新东西–vuex，和vue长得很像，于是就想把它弄懂，感觉在日后的开发中也有用"></a>1 这段时间一直在用vue写项目，突然在网上看到一个新东西–vuex，和vue长得很像，于是就想把它弄懂，感觉在日后的开发中也有用</h4><p>先说一下vuex到底是什么???</p><blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> vuex 是一个专门为vue.js应用程序开发的状态管理模式。</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"></span></span><br></pre></td></tr></table></figure></blockquote><p>这个状态我们可以理解为在data中的属性，需要共享给其他组件中使用的部分，也就是说，我们需要共享的data，使用vuex来进行统一集中式的管理。</p><p>在<code>vuex</code>中，有默认的五种基本的对象：</p><ul><li><p>state：存储状态（变量）</p></li><li><p>getters:对数据获取之前再次编译，可以理解为state的计算属性，我们在组件中使用$store.getters.fun()</p></li><li><p>mutations:修改状态，并且是同步的，在组件中使用$store.commit(‘’,params),这个和我们组件中的自定义事件类似</p></li><li><p>actions：异步操作，在组件中使用的是$store.disapth(‘’)</p></li><li><p>modules:store的子模块，为了开发大型项目，方便状态管理而使用的，这里我们就不解释了，用法和上边一样</p><h3 id="下面，我们就正式开始，一步一步的使用vuex"><a href="#下面，我们就正式开始，一步一步的使用vuex" class="headerlink" title="下面，我们就正式开始，一步一步的使用vuex"></a>下面，我们就正式开始，一步一步的使用vuex</h3><h4 id="1-首先创建一个vue-cli项目"><a href="#1-首先创建一个vue-cli项目" class="headerlink" title="1 首先创建一个vue-cli项目"></a>1 首先创建一个vue-cli项目</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">vue init webpack app</span></span><br></pre></td></tr></table></figure></li></ul><p><img src="https://www.img423.xyz/img/ebe09baabf4cb3348afadc55aabe71b.png" alt="pic1"></p><h4 id="2-创建完成之后，我们进入文件夹下，并运行项目"><a href="#2-创建完成之后，我们进入文件夹下，并运行项目" class="headerlink" title="2 创建完成之后，我们进入文件夹下，并运行项目"></a>2 创建完成之后，我们进入文件夹下，并运行项目</h4><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">cd</span> <span class="keyword">app</span></span><br><span class="line">npm <span class="keyword">run</span> dev</span><br></pre></td></tr></table></figure><h4 id="3-接下来我们在src目录下新建一个文件夹vuex-同时在文件夹下创建一个store-js的文件"><a href="#3-接下来我们在src目录下新建一个文件夹vuex-同时在文件夹下创建一个store-js的文件" class="headerlink" title="3 接下来我们在src目录下新建一个文件夹vuex,同时在文件夹下创建一个store.js的文件"></a>3 接下来我们在<code>src</code>目录下新建一个文件夹<code>vuex</code>,同时在文件夹下创建一个<code>store.js</code>的文件</h4><p>目录层级类似下图</p><p><img src="https://www.img423.xyz/img/be5c4b981514863986e39ce38ec21d7.png" alt="pic02"></p><h4 id="4-目前我们还没有引入vuex，先下载vuex-并且引入它"><a href="#4-目前我们还没有引入vuex，先下载vuex-并且引入它" class="headerlink" title="4 目前我们还没有引入vuex，先下载vuex,并且引入它"></a>4 目前我们还没有引入vuex，先下载vuex,并且引入它</h4><p><img src="https://www.img423.xyz/img/34871dbfe08b37f6a14753097aeb3c6.png" alt="pic03"></p><h4 id="5-安装成功之后，在store-js中引入Vuex"><a href="#5-安装成功之后，在store-js中引入Vuex" class="headerlink" title="5 安装成功之后，在store.js中引入Vuex"></a>5 安装成功之后，在store.js中引入Vuex</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  count:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="6-在main-js中引入store"><a href="#6-在main-js中引入store" class="headerlink" title="6 在main.js中引入store"></a>6 在main.js中引入store</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The Vue build version to load with the `import` command</span></span><br><span class="line"><span class="comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./vuex/store'</span>  <span class="comment">//引入store</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store, <span class="comment">//在实例上挂载store</span></span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后我们就可以在任意一个组件中使用我们定义的count属性了</p><p>我们在helloworld.vue中使用一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;hello&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;$store.state.count&#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;HelloWorld&apos;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h1, h2 &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">ul &#123;</span><br><span class="line">  list-style-type: none;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">li &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin: 0 10px;</span><br><span class="line">&#125;</span><br><span class="line">a &#123;</span><br><span class="line">  color: #42b983;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>然后我们就可以在浏览器看到效果了</p><p><img src="https://www.img423.xyz/img/pic4.jpg" alt="pic04"></p><h4 id="7-到这一步，vuex已经成功一小半了，回想一下，我们只需要安装使用vuex，在store-js中定义state对象，并且暴露出去，在main-js中使用我们的store-js-这里是为了防止在各个组件中引用，因为main-js中我们有new-Vue-实例"><a href="#7-到这一步，vuex已经成功一小半了，回想一下，我们只需要安装使用vuex，在store-js中定义state对象，并且暴露出去，在main-js中使用我们的store-js-这里是为了防止在各个组件中引用，因为main-js中我们有new-Vue-实例" class="headerlink" title="7 到这一步，vuex已经成功一小半了，回想一下，我们只需要安装使用vuex，在store.js中定义state对象，并且暴露出去，在main.js中使用我们的store.js(这里是为了防止在各个组件中引用，因为main.js中我们有new Vue({})实例)"></a>7 到这一步，vuex已经成功一小半了，回想一下，我们只需要安装使用vuex，在store.js中定义state对象，并且暴露出去，在main.js中使用我们的store.js(这里是为了防止在各个组件中引用，因为main.js中我们有new Vue({})实例)</h4><h4 id="8-现在我们已经使用了state，接下来我们该如何操作这个值呢？没错，使用mutations和actions"><a href="#8-现在我们已经使用了state，接下来我们该如何操作这个值呢？没错，使用mutations和actions" class="headerlink" title="8 现在我们已经使用了state，接下来我们该如何操作这个值呢？没错，使用mutations和actions"></a>8 现在我们已经使用了state，接下来我们该如何操作这个值呢？没错，使用<code>mutations</code>和<code>actions</code></h4><p>我们继续操作<code>store.js</code>文件，我们在<code>store.js</code>文件中定义<code>mutations</code>对象，该对象有两个方法，<code>mutations</code>里面的参数：第一个默认为<code>state</code>，第二个为自定义参数</p><p>我们在<code>mutations</code>中定义两个方法：增加和减少，并且设置一个参数为n,默认值为0，然后在<code>Vuex.Store</code>中使用它</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//store.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  count:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个mutations对象</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  mutationsAddCount(state,n = <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> state.count +=n;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutationsReduceCount(state,n = <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> state.count -=n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations <span class="comment">//使用mutations对象</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">//helloworld.vue</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123;$store.state.count&#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addCount(20)"</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"reduceCount(30)"</span>&gt;</span>reduce<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">export default &#123;</span></span><br><span class="line"><span class="xml">  name: 'HelloWorld',</span></span><br><span class="line"><span class="xml">  methods:&#123;</span></span><br><span class="line"><span class="xml">    addCount(n)&#123;</span></span><br><span class="line"><span class="xml">      this.$store.commit('mutationsAddCount',n)</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">    reduceCount(n)&#123;</span></span><br><span class="line"><span class="xml">      this.$store.commit("mutationsReduceCount",n)</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span></span><br><span class="line"><span class="xml">h1, h2 &#123;</span></span><br><span class="line"><span class="xml">  font-weight: normal;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">ul &#123;</span></span><br><span class="line"><span class="xml">  list-style-type: none;</span></span><br><span class="line"><span class="xml">  padding: 0;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">li &#123;</span></span><br><span class="line"><span class="xml">  display: inline-block;</span></span><br><span class="line"><span class="xml">  margin: 0 10px;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">a &#123;</span></span><br><span class="line"><span class="xml">  color: #42b983;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>来看一下浏览器效果如何</p><p><img src="https://www.img423.xyz/img/pic5.jpg" alt="pic5"></p><p>我们可以看到，每当我们出发事件时，都可以在浏览器中看到我们触发的mutations方法。</p><h4 id="9-创建actions对象"><a href="#9-创建actions对象" class="headerlink" title="9 创建actions对象"></a>9 创建actions对象</h4><p>创建actions对象并使用</p><p>这里actions对象包含两个方法，两个方法中使用了不同的两个参数：一个是context,它是一个和store对象具有相同对象属性的参数，在第二个函数中，我直接使用了这个对象的commit方法，凭大家喜好就行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//store.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  count:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  mutationsAddCount(state,n = <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> state.count +=n;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutationsReduceCount(state,n = <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> state.count -=n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  actionsAddCount(context,n = <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> context.commit(<span class="string">'mutationsAddCount'</span>,n)</span><br><span class="line">    <span class="comment">// return state.count +=n</span></span><br><span class="line">  &#125;,</span><br><span class="line">  actionsReduceCount(&#123;commit&#125;,n = <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> commit(<span class="string">'mutationsReduceCount'</span>,n)</span><br><span class="line">    <span class="comment">// return state.count -=n</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">//helloworld.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;hello&quot;&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123;$store.state.count&#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;button @click=&quot;addCount(20)&quot;&gt;add&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;reduceCount(30)&quot;&gt;reduce&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;syncAddCount(10)&quot;&gt;异步增加&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;syncReduceCount(20)&quot;&gt;异步减少&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;HelloWorld&apos;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    addCount(n)&#123;</span><br><span class="line">      this.$store.commit(&apos;mutationsAddCount&apos;,n)</span><br><span class="line">    &#125;,</span><br><span class="line">    reduceCount(n)&#123;</span><br><span class="line">      this.$store.commit(&quot;mutationsReduceCount&quot;,n)</span><br><span class="line">    &#125;,</span><br><span class="line">    syncAddCount(n)&#123;</span><br><span class="line">      this.$store.dispatch(&apos;actionsAddCount&apos;,n)</span><br><span class="line">    &#125;,</span><br><span class="line">    syncReduceCount(n)&#123;</span><br><span class="line">      this.$store.dispatch(&apos;actionsReduceCount&apos;,n)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">h1, h2 &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">ul &#123;</span><br><span class="line">  list-style-type: none;</span><br><span class="line">  padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">li &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin: 0 10px;</span><br><span class="line">&#125;</span><br><span class="line">a &#123;</span><br><span class="line">  color: #42b983;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="https://www.img423.xyz/img/pic6.jpg" alt="pic6"></p><p>在helloworld.vue中，在methods中，增加两个方法，使用dispath()来触发，最后的效果就是上图所示。</p><h4 id="10-最后就是getters"><a href="#10-最后就是getters" class="headerlink" title="10 最后就是getters"></a>10 最后就是getters</h4><p>我们一般使用getters来获取我们的state,因为它算是state的一个计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//store.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  count:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  mutationsAddCount(state,n = <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> state.count +=n;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutationsReduceCount(state,n = <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> state.count -=n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  actionsAddCount(context,n = <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> context.commit(<span class="string">'mutationsAddCount'</span>,n)</span><br><span class="line">    <span class="comment">// return state.count +=n</span></span><br><span class="line">  &#125;,</span><br><span class="line">  actionsReduceCount(&#123;commit&#125;,n = <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> commit(<span class="string">'mutationsReduceCount'</span>,n)</span><br><span class="line">    <span class="comment">// return state.count -=n</span></span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">  getterCount(state)&#123;</span><br><span class="line">    <span class="keyword">return</span> state.count +=<span class="number">10</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  actions,</span><br><span class="line">  getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">//helloworld.vue</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;$store.state.count&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addCount(20)"</span>&gt;</span>add<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"reduceCount(30)"</span>&gt;</span>reduce<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"syncAddCount(10)"</span>&gt;</span>异步增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"syncReduceCount(20)"</span>&gt;</span>异步减少<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="actionscript">  name: <span class="string">'HelloWorld'</span>,</span></span><br><span class="line"><span class="undefined">  methods:&#123;</span></span><br><span class="line"><span class="undefined">    addCount(n)&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$store.commit(<span class="string">'mutationsAddCount'</span>,n)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    reduceCount(n)&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$store.commit(<span class="string">"mutationsReduceCount"</span>,n)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    syncAddCount(n)&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$store.dispatch(<span class="string">'actionsAddCount'</span>,n)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    syncReduceCount(n)&#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">this</span>.$store.dispatch(<span class="string">'actionsReduceCount'</span>,n)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;,</span></span><br><span class="line"><span class="undefined">  computed:&#123;</span></span><br><span class="line"><span class="undefined">    count() &#123;</span></span><br><span class="line"><span class="actionscript">      <span class="keyword">return</span> <span class="keyword">this</span>.$store.getters.getterCount</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">h1, h2 &#123;</span></span><br><span class="line"><span class="undefined">  font-weight: normal;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">ul &#123;</span></span><br><span class="line"><span class="undefined">  list-style-type: none;</span></span><br><span class="line"><span class="undefined">  padding: 0;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">li &#123;</span></span><br><span class="line"><span class="undefined">  display: inline-block;</span></span><br><span class="line"><span class="undefined">  margin: 0 10px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">a &#123;</span></span><br><span class="line"><span class="css">  <span class="selector-tag">color</span>: <span class="selector-id">#42b983</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>getter算是非常简单的了，到这里如果全都看懂了，vuex你已经没有压力了</p><p>但是vuex官方给了我们一个更加简单的方式来使用vuex，也就是<code>{mapState, mapMutations, mapActions, mapGetters}</code></p><p>只要我们把上边的基础搞懂，这些都不在话下，只是方便我们书写罢了</p><p>就这么简单，这里我们用到了ES6的拓展运算符，如果部署下的同学建议去看看阮一峰的《ES6入门标准》这本书</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;mapState, mapMutations, mapActions, mapGetters&#125; from &apos;vuex&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;HelloWorld&apos;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      msg: &apos;Welcome to Your Vue.js App&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    ...mapMutations(&#123;</span><br><span class="line">      handleAddClick: &apos;mutationsAddCount&apos;,</span><br><span class="line">      handleReduceClick: &apos;mutationsReduceCount&apos;</span><br><span class="line">    &#125;),</span><br><span class="line">    ...mapActions(&#123;</span><br><span class="line">      handleActionsAdd: &apos;actionsAddCount&apos;,</span><br><span class="line">      handleActionsReduce: &apos;actionsReduceCount&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">    // handleAddClick(n)&#123;</span><br><span class="line">    //   this.$store.commit(&apos;mutationsAddCount&apos;,n);</span><br><span class="line">    // &#125;,</span><br><span class="line">    // handleReduceClick(n)&#123;</span><br><span class="line">    //   this.$store.commit(&apos;mutationsReduceCount&apos;,n);</span><br><span class="line">    // &#125;,</span><br><span class="line">    // handleActionsAdd(n)&#123;</span><br><span class="line">    //   this.$store.dispatch(&apos;actionsAddCount&apos;,n)</span><br><span class="line">    // &#125;,</span><br><span class="line">    // handleActionsReduce(n)&#123;</span><br><span class="line">    //   this.$store.dispatch(&apos;actionsReduceCount&apos;,n)</span><br><span class="line">    // &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count()&#123;</span><br><span class="line">      return this.$store.getters.getterCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>同理，getters和 state也可以使用 mapState，mapGetters</p><p>最后，如果本文有什么错误的地方，欢迎在下方评论区指出，不胜感激！！！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;1-这段时间一直在用vue写项目，突然在网上看到一个新东西–vuex，和vue长得很像，于是就想把它弄懂，感觉在日后的开发中也有用&quot;&gt;&lt;a href=&quot;#1-这段时间一直在用vue写项目，突然在网上看到一个新东西–vuex，和vue长得很像，于是就想把它弄懂，感觉
      
    
    </summary>
    
    
      <category term="学习笔记，教程" scheme="https://www.xjt5213.club/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%8C%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>v-model是什么?怎么使用？vue中标签如何绑定事件</title>
    <link href="https://www.xjt5213.club/2019/07/26/v-model%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%A0%87%E7%AD%BE%E7%BB%91%E5%AE%9A%E4%BA%8B%E4%BB%B6/"/>
    <id>https://www.xjt5213.club/2019/07/26/v-model使用及标签绑定事件/</id>
    <published>2019-07-25T16:00:00.000Z</published>
    <updated>2019-07-26T07:28:52.604Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引用官方文档的一段话"><a href="#引用官方文档的一段话" class="headerlink" title="引用官方文档的一段话"></a>引用官方文档的一段话</h3><blockquote><p>你可以用 <code>v-model</code> 指令在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 及 <code>&lt;select&gt;</code> 元素上创建双向数据绑定。它会根据控件类型自动选取正确的方法来更新元素。尽管有些神奇，但 <code>v-model</code> 本质上不过是语法糖。它负责监听用户的输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p><blockquote><blockquote><p><code>v-model</code> 会忽略所有表单元素的 <code>value</code>、<code>checked</code>、<code>selected</code> 特性的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 <code>data</code> 选项中声明初始值。</p></blockquote></blockquote></blockquote><p><code>v-moidel</code>在内部为不同的输入元素使用不同的属性并跑出不同的时间</p><ul><li><p>text 和 textarea 元素使用 <code>value</code> 属性和 <code>input</code> 事件；</p></li><li><p>checkbox 和 radio 使用 <code>checked</code> 属性和 <code>change</code> 事件；</p></li><li><p>select 字段将 <code>value</code> 作为 prop 并将 <code>change</code> 作为事件。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-1.12.4.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"篮球"</span> <span class="attr">id</span>=<span class="string">"basketball"</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"basketball"</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>  <span class="attr">value</span>=<span class="string">"足球"</span> <span class="attr">id</span>=<span class="string">"football"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"football"</span>&gt;</span>足球<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"羽毛球"</span> <span class="attr">id</span>=<span class="string">"yumao"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"yumao"</span>&gt;</span>羽毛球<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>你的选择是：&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    $(function () &#123;</span></span><br><span class="line"><span class="undefined">        new Vue(&#123;</span></span><br><span class="line"><span class="undefined">            el:"#app",</span></span><br><span class="line"><span class="undefined">            data:&#123;</span></span><br><span class="line"><span class="undefined">                message:[]</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>所谓数据的双向绑定，指的就是我们在js中的vue实例中的data与其渲染的dom元素上的内容保持一致，两者无论谁被改变，另一方也会相应的更新为相同的数据。这是通过设置属性访问器实现的。</p><h3 id="2-vue中标签如何绑定事件"><a href="#2-vue中标签如何绑定事件" class="headerlink" title="2. vue中标签如何绑定事件"></a>2. vue中标签如何绑定事件</h3><p>可以用 <code>v-on</code> 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example-2"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- `greet` 是在下面定义的方法名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"greet"</span>&gt;</span>Greet<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> example2 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example-2'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    name: <span class="string">'Vue.js'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 在 `methods` 对象中定义方法</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    greet: <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">      <span class="comment">// `this` 在方法里指向当前 Vue 实例</span></span><br><span class="line">      alert(<span class="string">'Hello '</span> + <span class="keyword">this</span>.name + <span class="string">'!'</span>)</span><br><span class="line">      <span class="comment">// `event` 是原生 DOM 事件</span></span><br><span class="line">      <span class="keyword">if</span> (event) &#123;</span><br><span class="line">        alert(event.target.tagName)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;引用官方文档的一段话&quot;&gt;&lt;a href=&quot;#引用官方文档的一段话&quot; class=&quot;headerlink&quot; title=&quot;引用官方文档的一段话&quot;&gt;&lt;/a&gt;引用官方文档的一段话&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;你可以用 &lt;code&gt;v-model&lt;/code&gt;
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.xjt5213.club/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>js事件冒泡及事件捕获</title>
    <link href="https://www.xjt5213.club/2019/07/26/js%E4%BA%8B%E4%BB%B6%E5%86%92%E6%B3%A1%E5%8F%8A%E6%8D%95%E8%8E%B7/"/>
    <id>https://www.xjt5213.club/2019/07/26/js事件冒泡及捕获/</id>
    <published>2019-07-25T16:00:00.000Z</published>
    <updated>2019-07-26T03:22:43.184Z</updated>
    
    <content type="html"><![CDATA[<h3 id="DOM事件流存在三个阶段：即事件捕获阶段、出于目标阶段、事件冒泡阶段"><a href="#DOM事件流存在三个阶段：即事件捕获阶段、出于目标阶段、事件冒泡阶段" class="headerlink" title="DOM事件流存在三个阶段：即事件捕获阶段、出于目标阶段、事件冒泡阶段"></a>DOM事件流存在三个阶段：即事件捕获阶段、出于目标阶段、事件冒泡阶段</h3><p>事件捕获：通俗的理解就是，当鼠标点击或者触发DOM事件时，浏览器会从根节点开始<code>由外到内</code>进行事件传播，即点击了子元素，如果父元素通过事件捕获的方式注册了对应事件的话，就会先触发父元素绑定的事件。</p><p>事件冒泡：与事件捕获恰恰相反，事件冒泡顺序是由内向外进行事件传播。</p><p>无论是事件捕获还是事件冒泡，它们都有一个共同的行为：那就是事件传播。它就像是一根引线，只有通过引线，才能将绑定在引线上的鞭炮（事件监听器）引爆。</p><p>DOM标准事件流的触发先后顺序为<code>先捕获再冒泡</code>，即当触发DOM事件时，先进行事件捕获，捕获到事件源时候通过事件传播进行事件冒泡，不同的浏览器对此有着不同的实现，ie10及以下不支持事件捕获，所以就少了一个事件捕获阶段；IE11，Chrome，Firefox，Safari等浏览器则同时存在。</p><p>说到事件冒泡与捕获就不得不提一下两个用于事件绑定的方法addEventListener、attachEvent。当然还有其它的事件绑定的方式这里不做介绍。</p><p>​    <strong>addEventListener(event, listener, useCapture)</strong>　</p><p>​        <em>·参数定义：</em>event—（事件名称，如click，不带on）</p><p>​                    listener—事件监听函数</p><p>​                                    useCapture—*是否采用事件捕获进行事件捕捉，默认为false，即采用事件冒泡方式</p><p>​    <strong>attachEvent(event,listener)</strong></p><p>​        ·<em>参数定义</em>：event—（事件名称，如onclick，带on）</p><p>​                    listener—事件监听函数。</p><p>　　　　attachEvent主要用于IE浏览器，并且仅在IE10及以下才支持，IE11已经废了这个方法了（微软还是挺识趣的，慢慢向标准靠拢）。</p><p><strong>事件冒泡例子</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">        <span class="selector-id">#parent</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 200px;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">height</span><span class="selector-pseudo">:200px</span>;</span></span><br><span class="line"><span class="undefined">            text-align: center;</span></span><br><span class="line"><span class="undefined">            line-height: 3;</span></span><br><span class="line"><span class="undefined">            background: green;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#child</span>&#123;</span></span><br><span class="line"><span class="undefined">            width: 100px;</span></span><br><span class="line"><span class="undefined">            height: 100px;</span></span><br><span class="line"><span class="undefined">            margin: 0 auto;</span></span><br><span class="line"><span class="undefined">            background: orange;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">        父元素</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">            子元素</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> parent = <span class="built_in">document</span>.getElementById(<span class="string">"parent"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> child = <span class="built_in">document</span>.getElementById(<span class="string">'child'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"click-body"</span>)</span></span><br><span class="line"><span class="actionscript">    &#125;,<span class="literal">false</span>)</span></span><br><span class="line"><span class="actionscript">    parent.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'click-parent'</span>)</span></span><br><span class="line"><span class="actionscript">    &#125;,<span class="literal">false</span>)</span></span><br><span class="line"><span class="actionscript">    child.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'click-child'</span>)</span></span><br><span class="line"><span class="actionscript">    &#125;,<span class="literal">false</span>)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过addEventListener方法，采用事件冒泡方式给DOM元素注册事件，点击子元素会发生什么呢？如果你对事件冒泡有一定的了解的话，name你一定会知道上面代码的输出顺序，如下图所示：</p><p><img src="https://www.img423.xyz/img/1564109345368.png" alt="1564109345368"></p><p>事件触发顺序是由内到外的，这就是事件冒泡，虽然只点击子元素，但是它的父元素也会触发相应的事件，其实这是合理的，因为子元素在父元素里面，点击子元素也就相当于变相的点击了父元素，这样理解对吧？</p><p>这里有同学可能要问了，如果点击子元素不想触发父元素的事件怎么办？肯定可以的，那就是停止事件传播—event.stopPropagation();</p><p>修改例子1的代码，在子元素的事件监听函数中加入停止事件冒泡的操作，示例2.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">child.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'click-child'</span>)</span><br><span class="line">       e.stopPropagation()</span><br><span class="line">   &#125;,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>在改变上述代码之后，点击子元素，浏览器控制台将输出什么呢，如图：</p><p><img src="https://www.img423.xyz/img/1564109725770.png" alt="1564109725770"></p><p>由于手动停止了事件冒泡，所以点击子元素的时候就只触发了子元素的<code>click</code>方法，并没有触发父元素及body的，冒泡阶段也就停止了。</p><p><strong>讲完了事件冒泡，接下来讲一下事件捕获，请看示例</strong></p><p>修改例子1中的代码，给<code>parent</code>元素注册一个捕获事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = <span class="built_in">document</span>.getElementById(<span class="string">"parent"</span>);</span><br><span class="line">   <span class="keyword">var</span> child = <span class="built_in">document</span>.getElementById(<span class="string">'child'</span>);</span><br><span class="line">   <span class="built_in">document</span>.body.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">"click-body"</span>)</span><br><span class="line">   &#125;,<span class="literal">false</span>)</span><br><span class="line">   parent.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'click-parent'</span>)</span><br><span class="line">   &#125;,<span class="literal">true</span>)</span><br><span class="line">   child.addEventListener(<span class="string">'click'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="string">'click-child'</span>)</span><br><span class="line">       </span><br><span class="line">   &#125;,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure><p>看明白我说的那些，就知道上面的代码输出顺序了：</p><p><img src="https://www.img423.xyz/img/1564110143864.png" alt="1564110143864"></p><p>父元素通过事件捕获的方式注册了click事件，所以在事件捕获阶段就会触发，然后到了目标阶段，即事件源，之后进行事件传播，parent同时也用冒泡方式注册了click事件，所以这里会触发冒泡事件，最后到根节点。这就是整个事件流程。</p><p>上面介绍了事件冒泡、事件捕获、事件传播，下面讲一下如何通过以上三个知识点进行<code>事件委托</code></p><p>委托在<code>JQuery</code>中已经得到了实现，即通过<code>$(*selector*).on(*event,childSelector,data,function,map*)</code>实现委托，一般用于动态生成的元素，当然<code>JQuery</code>也是通过原声的js去实现的，下面举一个简单的栗子，通过js实现通过<code>parent</code>元素给<code>child</code>元素注册<code>click</code>事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = <span class="built_in">document</span>.getElementById(<span class="string">"parent"</span>);</span><br><span class="line">   <span class="keyword">var</span> child = <span class="built_in">document</span>.getElementById(<span class="string">'child'</span>);</span><br><span class="line">   parent.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (e.target.id == <span class="string">'child'</span>)&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="string">'click-child'</span>);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p><img src="https://www.img423.xyz/img/1564110477922.png" alt="1564110477922"></p><p>虽然没有直接只child元素注册click事件，可是点击child元素时却弹出了提示信息。</p><p>到这里是不是对js的事件机制有一定的了解了呢？感觉有帮助的话就看看下面的小黄脸，你懂得哦！</p><p><strong>如有错误，欢迎指正</strong></p><p><strong>如有问题，欢迎提问</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;DOM事件流存在三个阶段：即事件捕获阶段、出于目标阶段、事件冒泡阶段&quot;&gt;&lt;a href=&quot;#DOM事件流存在三个阶段：即事件捕获阶段、出于目标阶段、事件冒泡阶段&quot; class=&quot;headerlink&quot; title=&quot;DOM事件流存在三个阶段：即事件捕获阶段、出于目
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.xjt5213.club/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Linux命令学习</title>
    <link href="https://www.xjt5213.club/2019/06/27/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://www.xjt5213.club/2019/06/27/linux常用命令/</id>
    <published>2019-06-26T16:00:00.000Z</published>
    <updated>2019-06-27T05:59:20.802Z</updated>
    
    <content type="html"><![CDATA[<h3 id="话不多说直接上命令哈哈哈哈"><a href="#话不多说直接上命令哈哈哈哈" class="headerlink" title="话不多说直接上命令哈哈哈哈"></a>话不多说直接上命令哈哈哈哈</h3><p>Linux常用命令</p><p><strong>1.</strong> <strong>目录操作命令</strong></p><p>\1. ls:显示当前目录下的文件（不包含隐藏文件）</p><p>\2. ls 目录名：显示指定目录下的文件</p><p>\3. ls -l :列出文件的详细信息</p><p>\4. ls -l 文件名：显示指定文件的详细信息</p><p>\5. ls -a:显示当前目录下的所有文件（包含了隐藏文件）</p><p>\6. cd 绝对路径：进入到指定路径</p><p>\7. cd ~ : 进入到当前用户的家目录</p><p>\8. cd .. : 进入到上一级目录</p><p>\9. cd / : 返回根目录</p><p>\10. cd ./当前目录下的其他文件夹:进入当前目录下的其他目录</p><p>\11. pwd : 显示当前所在的目录 </p><p>\12. mkdir 自定义目录名：例如-mkdir test 在当前目录下创建名为test的目录</p><p>\13. mkdir -p 递归路径：例如mkdir -p test1/test2/test3 </p><p>\14. rmdir 目录名 ：删除目录（只能删除空目录）</p><p><strong>2.</strong> <strong>文件操作命令</strong></p><p>\1. touch: 创建空文件（文件不存在时）或者修改文件时间（文件存在时修改文件时间）</p><p>\2. rm 文件名：删除文件</p><p>\3. rm -f 文件名：强制删除文件</p><p>\4. rm -rf 目录名：强制删除目录和文件</p><p>\5. cat 文件名：查看文件内容</p><p>\6. cp 源文件 目标位置：复制文件到指定目录</p><p>\7. cp -r 目录名 目标位置：复制目录到指定目录</p><p>\8. mv 源文件 目标位置：</p><p>例如：mv /root/test  /tmp/ 将/root/下的test文件移动到/tmp/目录下</p><p>mv /root/test  /root/newtest 将/root/下的test文件改名为newtest</p><p><strong>3.</strong> <strong>查找命令</strong></p><p>\1. find 查找位置 -name 文件名：</p><p>\2. whereis 文件名：查找文件，同时列出文件路径</p><p>\3. Which ：用于查找可执行命令，只能查找可执行文件， 例如which ls </p><p><strong>4.</strong> <strong>编辑命令</strong></p><p>\1. Vi 文件名：编辑文件</p><p>\1. Ins 进入编辑模式</p><p>\2. Esc 退出编辑模式，进入命令模式</p><p>\3. <img src="file:///C:\Users\xjt5213\AppData\Local\Temp\ksohtml7256\wps1.jpg" alt="img"></p><p>\2. vim 文件名：用法与vi类似</p><p>\3. nano 文件名：</p><p><img src="file:///C:\Users\xjt5213\AppData\Local\Temp\ksohtml7256\wps2.jpg" alt="img"> </p><p>\4. 换源</p><p>Yum工具：换源路径：</p><p>/etc/yum.repos.d/CentOS-Base.repo</p><p>yum makecache：更新软件包缓存</p><p>Apt工具：换源路径：</p><p>/etc/apt/sources.list</p><p> Apt-get update :更新缓存</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;话不多说直接上命令哈哈哈哈&quot;&gt;&lt;a href=&quot;#话不多说直接上命令哈哈哈哈&quot; class=&quot;headerlink&quot; title=&quot;话不多说直接上命令哈哈哈哈&quot;&gt;&lt;/a&gt;话不多说直接上命令哈哈哈哈&lt;/h3&gt;&lt;p&gt;Linux常用命令&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.xjt5213.club/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>vue-router使用步骤</title>
    <link href="https://www.xjt5213.club/2019/06/26/vue-router%E4%BD%BF%E7%94%A8%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>https://www.xjt5213.club/2019/06/26/vue-router使用步骤详解/</id>
    <published>2019-06-25T16:00:00.000Z</published>
    <updated>2019-07-26T05:59:43.816Z</updated>
    
    <content type="html"><![CDATA[<p><strong>最近在学习vue框架，一直对vue中的路由使用步骤不太明白，于是就写一篇关于vue-router的使用步骤吧</strong></p><h3 id="1-安装vue-router（使用npm安装）"><a href="#1-安装vue-router（使用npm安装）" class="headerlink" title="1. 安装vue-router（使用npm安装）"></a>1. 安装vue-router（使用npm安装）</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="keyword">install</span> vue-router <span class="comment">--save</span></span><br></pre></td></tr></table></figure><h3 id="2-在vue组件内配置router-link和router-view"><a href="#2-在vue组件内配置router-link和router-view" class="headerlink" title="2.  在vue组件内配置router-link和router-view"></a>2.  在vue组件内配置router-link和router-view</h3><ul><li><p><code>router-link</code>:映射路由.就是创建a标签来定义路由导航的链接(用户通过点击实现跳转).通过to属性指定目标地址.默认渲染成带有正确链接的<a>标签.</a></p></li><li><p><code>router-view</code>:就是在标签内渲染你路由匹配到的视图组件.router-view支持嵌套router-view,并且支持多个router-view分别渲染不同的<code>component</code>.</p><p><strong>具体用法如下</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这里引用官方例子的写法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user/foo"</span>&gt;</span>/user/foo<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/user/bar"</span>&gt;</span>/user/bar<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span>PS:写在这里,即router-view里的内容是不会显示在页面上的!<span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-配置路由实例index-js"><a href="#3-配置路由实例index-js" class="headerlink" title="3. 配置路由实例index.js"></a>3. 配置路由实例index.js</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;vue&apos; //第一步，引入必要的文件vue,加载全局组件时使用</span><br><span class="line">import Router from &apos;vue-router&apos; //第二步，引入vue-router</span><br><span class="line">//第三步. 加载路由组件</span><br><span class="line">import Main from &quot;../components/Main/Main&quot;;</span><br><span class="line">import aboutus from &quot;../components/aboutus/aboutus&quot;</span><br><span class="line">import like from &quot;../components/like/like&quot;</span><br><span class="line">import news from &quot;../components/news/news&quot;</span><br><span class="line">import reverse from &quot;../components/reverse/reverse&quot;</span><br><span class="line">//第四步，加载全局组件Router</span><br><span class="line">Vue.use(Router)</span><br><span class="line">//第五步，配置路由实例</span><br><span class="line">export default new Router(&#123;</span><br><span class="line">  linkActiveClass:&apos;active&apos;,  //为当前选中的router-link组件添加active</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/&apos;,</span><br><span class="line">      redirect:&quot;/Main&quot;,  //设置重定向</span><br><span class="line">      component: Main</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: &apos;/Main&apos;,</span><br><span class="line">      component: Main</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path:&apos;/aboutus&apos;,</span><br><span class="line">      component:aboutus</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path:&apos;/like&apos;,</span><br><span class="line">      component:like</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path:&apos;/news&apos;,</span><br><span class="line">      component:news</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path:&apos;/reverse&apos;,</span><br><span class="line">      component:reverse</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-在main-js中引入router-js并挂载到vue实例上"><a href="#4-在main-js中引入router-js并挂载到vue实例上" class="headerlink" title="4. 在main.js中引入router.js并挂载到vue实例上"></a>4. 在main.js中引入router.js并挂载到vue实例上</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// The Vue build version to <span class="keyword">load</span> <span class="keyword">with</span> the <span class="string">`import`</span> command</span><br><span class="line">// (runtime-<span class="keyword">only</span> <span class="keyword">or</span> <span class="keyword">standalone</span>) has been <span class="keyword">set</span> <span class="keyword">in</span> webpack.base.conf <span class="keyword">with</span> an alias.</span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span>  //引入router.js</span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">'jquery'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'bootstrap'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router, //挂载到vue实例，这个是简写，全称是router：router</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  <span class="keyword">template</span>: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="5-区分一下router，routes，route"><a href="#5-区分一下router，routes，route" class="headerlink" title="5. 区分一下router，routes，route?"></a>5. 区分一下router，routes，route?</h3><ul><li>router:一般指的就是路由实例.如$router.</li><li>routes:指router路由实例的routes API.用来配置多个route路由对象.</li><li>route:指的就是路由对象.例如;$route指的就是当前路由对象.</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;最近在学习vue框架，一直对vue中的路由使用步骤不太明白，于是就写一篇关于vue-router的使用步骤吧&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-安装vue-router（使用npm安装）&quot;&gt;&lt;a href=&quot;#1-安装vue-router（使用n
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.xjt5213.club/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>HTML/CSS基础总结（1）</title>
    <link href="https://www.xjt5213.club/2019/06/20/htmlcss%E9%9D%A2%E8%AF%95%E5%9F%BA%E7%A1%80%E9%A2%98%EF%BC%881%EF%BC%89/"/>
    <id>https://www.xjt5213.club/2019/06/20/htmlcss面试基础题（1）/</id>
    <published>2019-06-19T16:00:00.000Z</published>
    <updated>2019-06-20T10:31:51.401Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-列出display的值，说明他们的作用。"><a href="#1-列出display的值，说明他们的作用。" class="headerlink" title="1.列出display的值，说明他们的作用。"></a>1.列出display的值，说明他们的作用。</h3><table><thead><tr><th style="text-align:left"><strong>值</strong></th><th style="text-align:left"><strong>描述</strong></th></tr></thead><tbody><tr><td style="text-align:left">none</td><td style="text-align:left">此元素不会被显示。</td></tr><tr><td style="text-align:left">block</td><td style="text-align:left">此元素将显示为块级元素，此元素前后会带有换行符。</td></tr><tr><td style="text-align:left">inline</td><td style="text-align:left">默认。此元素会被显示为内联元素，元素前后没有换行符。</td></tr><tr><td style="text-align:left">inline-block</td><td style="text-align:left">行内块元素。</td></tr><tr><td style="text-align:left">list-item</td><td style="text-align:left">此元素会作为列表显示。</td></tr><tr><td style="text-align:left">run-in</td><td style="text-align:left">此元素会根据上下文作为块级元素或内联元素显示。</td></tr><tr><td style="text-align:left">compact</td><td style="text-align:left">CSS 中有值 compact，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。</td></tr><tr><td style="text-align:left">marker</td><td style="text-align:left">CSS 中有值 marker，不过由于缺乏广泛支持，已经从 CSS2.1 中删除。</td></tr><tr><td style="text-align:left">table</td><td style="text-align:left">此元素会作为块级表格来显示，表格前后带有换行符。</td></tr><tr><td style="text-align:left">inline-table</td><td style="text-align:left">此元素会作为内联表格来显示，表格前后没有换行符。</td></tr><tr><td style="text-align:left">table-row-group</td><td style="text-align:left">此元素会作为一个或多个行的分组来显示</td></tr><tr><td style="text-align:left">table-header-group</td><td style="text-align:left">此元素会作为一个或多个行的分组来显示</td></tr><tr><td style="text-align:left">table-footer-group</td><td style="text-align:left">此元素会作为一个或多个行的分组来显示</td></tr><tr><td style="text-align:left">table-row</td><td style="text-align:left">此元素会作为一个表格行显示</td></tr><tr><td style="text-align:left">table-column-group</td><td style="text-align:left">此元素会作为一个或多个列的分组来显示</td></tr><tr><td style="text-align:left">table-column</td><td style="text-align:left">此元素会作为一个单元格列显示</td></tr><tr><td style="text-align:left">table-cell</td><td style="text-align:left">此元素会作为一个表格单元格显示</td></tr><tr><td style="text-align:left">table-caption</td><td style="text-align:left">此元素会作为一个表格标题显示</td></tr><tr><td style="text-align:left">inherit</td><td style="text-align:left">规定应该从父元素继承 display 属性的值。</td></tr></tbody></table><h3 id="2-position的值：relative和absolute的定位原点是？"><a href="#2-position的值：relative和absolute的定位原点是？" class="headerlink" title="2.position的值：relative和absolute的定位原点是？"></a>2.position的值：relative和absolute的定位原点是？</h3><ul><li><strong>absolute：</strong>绝对定位，定位原点是离自己这一级元素最近的一级position设置为absolute或者relative的父元素的左上角为原点。</li><li><strong>relative：</strong>相对定位，定位原点是元素本身所在的位置。</li></ul><h3 id="3-CSS3有哪些新特性？"><a href="#3-CSS3有哪些新特性？" class="headerlink" title="3.CSS3有哪些新特性？"></a>3.CSS3有哪些新特性？</h3><ul><li><p>圆角<code>border-radius</code>:值通常有<code>px、rem、em、%</code>（基于元素的width和height表示）。</p><p>1，当为一个值时：表示所有的角都为这个值</p><p>2，当为两个值时，表示左上，右下角相等、右上、左下角相等</p><p>3，当为三个值时，第一个值为左上角，第二个值为左下、右上角，第三个值为右下角</p><p>4，当为多个值时，可以为所有的角都设置值，从左上角开始</p><p>5，当用/来表示时，/前面的为水平半径，/后的为垂直半径</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-列出display的值，说明他们的作用。&quot;&gt;&lt;a href=&quot;#1-列出display的值，说明他们的作用。&quot; class=&quot;headerlink&quot; title=&quot;1.列出display的值，说明他们的作用。&quot;&gt;&lt;/a&gt;1.列出display的值，说明他们的作
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.xjt5213.club/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>清除浮动的几种方法</title>
    <link href="https://www.xjt5213.club/2019/04/12/%E6%B8%85%E9%99%A4%E6%B5%AE%E5%8A%A8%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://www.xjt5213.club/2019/04/12/清除浮动的方法/</id>
    <published>2019-04-12T06:43:45.000Z</published>
    <updated>2019-04-12T08:33:27.352Z</updated>
    
    <content type="html"><![CDATA[<p>今天在班上分享几种清除浮动的方法，讲到一半突然忘了，贼尴尬，于是自己在网上找了几种解决办法来清除浮动</p><p>先看一段代码—-html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDiv"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDiv01"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDiv02"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再给一段css代码  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">       <span class="selector-class">.myDiv</span>&#123;</span><br><span class="line">           <span class="attribute">background-color</span>: red;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.myDiv01</span>&#123;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: pink;</span><br><span class="line">           <span class="attribute">float</span>:left;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.myDiv02</span>&#123;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: aqua;</span><br><span class="line">           <span class="attribute">float</span>:left;</span><br><span class="line">       &#125;</span><br><span class="line">   &lt;/style&gt;</span><br></pre></td></tr></table></figure><p>上面代码中我分别给了两个子div一个<code>float：left;</code>于是他们就向左浮动，出现在一行了；看看下图效果</p><p><img src="https://i.loli.net/2019/04/12/5cb03649c9429.png" alt="1"></p><p>从中可以看到，当我给两个子div分别设置向左浮动之后，可以看看右下角的盒子模型，父div的高度变成了0，这是为什么呢？</p><p style="font-size:18px;font-weight:blod;background-color:yellow;">情况是这样的，当我们分别给两个子div设置<code>float:left;</code>之后，子就会脱离文档流，不在占有页面位置了，所以我们看到的高度为0了</p><p>那么我们应该怎样解决这种情况呢（在不删除<code>float:left;</code>的情况下）？？</p><p>在网上找了几种解决办法：</p><h4 id="1，利用clear-both"><a href="#1，利用clear-both" class="headerlink" title="1，利用clear:both;"></a>1，利用<code>clear:both;</code></h4><p>1，在父级下面增加一个空标签，设置css属性为<code>clear:both;</code>。看代码—css</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">       <span class="selector-class">.myDiv</span>&#123;</span><br><span class="line">           <span class="attribute">background-color</span>: red;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.myDiv01</span>&#123;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: pink;</span><br><span class="line">           <span class="attribute">float</span>: left;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.myDiv02</span>&#123;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: aqua;</span><br><span class="line">           <span class="attribute">float</span>: left;</span><br><span class="line">       &#125;</span><br><span class="line">   + <span class="selector-class">.myDiv03</span>&#123;</span><br><span class="line">   +        clear: both;</span><br><span class="line">   +    &#125;</span><br><span class="line">   &lt;/style&gt;</span><br></pre></td></tr></table></figure><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDiv"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDiv01"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDiv02"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  +      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDiv03"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后看效果</p><p><img src="https://i.loli.net/2019/04/12/5cb03a10ba298.png" alt="2"></p><p>可以看到加上上面代码之后，在看右下角的盒子模型，父级的高度变成了200px;也就是说生效了。</p><h4 id="2，直接给父级具体的宽和高"><a href="#2，直接给父级具体的宽和高" class="headerlink" title="2，直接给父级具体的宽和高"></a>2，直接给父级具体的宽和高</h4><p>我们可以直接给父级一个具体的宽高，之前我们是没有给父级宽度和高度的，父级的宽度和高度是由子撑开的 ，下面我们给父级一个具体的宽度和高度  </p><p>html  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDiv"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDiv01"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDiv02"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">        <span class="selector-class">.myDiv</span>&#123;</span><br><span class="line">    +         width: 500px;</span><br><span class="line">    +        <span class="selector-tag">height</span>: 300<span class="selector-tag">px</span>;</span><br><span class="line">            <span class="selector-tag">background-color</span>: <span class="selector-tag">red</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.myDiv01</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.myDiv02</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: aqua;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure><p>给了之后来看效果  </p><p><img src="https://i.loli.net/2019/04/12/5cb03c0c18d75.png" alt="3"></p><p>给了具体的宽高之后，右下角的盒子模型里面父级的宽度和高度就是css代码里面我给的宽高了，所以这种方法也可行  </p><h4 id="3，利用伪元素：：after"><a href="#3，利用伪元素：：after" class="headerlink" title="3，利用伪元素：：after"></a>3，利用伪元素<code>：：after</code></h4><p>我们还可以利用伪元素<code>::after</code>来达到清除浮动的效果，直接上代码  </p><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDiv"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDiv01"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDiv02"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">    <span class="selector-class">.myDiv</span>&#123;</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.myDiv01</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: pink;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-class">.myDiv02</span>&#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">        <span class="attribute">background-color</span>: aqua;</span><br><span class="line">        <span class="attribute">float</span>: left;</span><br><span class="line">    &#125;</span><br><span class="line">+     <span class="selector-class">.myDiv</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">+        content: "";</span><br><span class="line">+         <span class="selector-tag">width</span>: 0;</span><br><span class="line">+         <span class="selector-tag">height</span>: 0;</span><br><span class="line">+         <span class="selector-tag">visibility</span>: <span class="selector-tag">hidden</span>;</span><br><span class="line">+          <span class="selector-tag">display</span>: <span class="selector-tag">block</span>;</span><br><span class="line">+      &#125;</span><br><span class="line">   </span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>来看一下效果是什么样子的  </p><p><img src="https://i.loli.net/2019/04/12/5cb03daf9dc49.png" alt="4"></p><p>利用伪元素<code>::after</code>之后也可以解决 ，原理是通过清除伪元素的浮动，达到撑起父元素高度的目的。注意到该伪元素的<code>display</code>类型为<code>block</code>,他是一个不可见的块级元素。其原理跟方法一类似。</p><h4 id="4，利用overflow来清除浮动"><a href="#4，利用overflow来清除浮动" class="headerlink" title="4，利用overflow来清除浮动"></a>4，利用overflow来清除浮动</h4><p>我们可以直接给父元素一个<code>overflow:hidden;</code>或者<code>overflow:auto</code>样式，来看看代码  </p><p>html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDiv"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDiv01"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDiv02"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">       <span class="selector-class">.myDiv</span>&#123;</span><br><span class="line">           <span class="attribute">background-color</span>: red;</span><br><span class="line">+           overflow: hidden;  /*用overflow:auto;也行*/</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.myDiv01</span>&#123;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: pink;</span><br><span class="line">           <span class="attribute">float</span>: left;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="selector-class">.myDiv02</span>&#123;</span><br><span class="line">           <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">           <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">           <span class="attribute">background-color</span>: aqua;</span><br><span class="line">           <span class="attribute">float</span>: left;</span><br><span class="line">       &#125;</span><br><span class="line">      </span><br><span class="line">   &lt;/style&gt;</span><br></pre></td></tr></table></figure><p>我们来看看效果  </p><p><img src="https://i.loli.net/2019/04/12/5cb03ffd770a4.png" alt="5">  </p><p>这个原理的话暂时还没弄明白，等后面弄明白了再来更新吧！！！  </p><h4 id="5，给父级也添加float-left-属性"><a href="#5，给父级也添加float-left-属性" class="headerlink" title="5，给父级也添加float:left;属性"></a>5，给父级也添加<code>float:left;</code>属性</h4><p>也可以直接给父级一个<code>float:left;</code>样式属性   看代码  </p><p>html  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDiv"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDiv01"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"myDiv02"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>css  </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type="text/css"&gt;</span><br><span class="line">        <span class="selector-class">.myDiv</span>&#123;</span><br><span class="line">            <span class="attribute">background-color</span>: red;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.myDiv01</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: pink;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-class">.myDiv02</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: aqua;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure><p>我们来看效果  </p><p><img src="https://i.loli.net/2019/04/12/5cb041ed7dfcd.png" alt="6"></p><p>当给父级一个<code>float:left;</code>之后，父级的高度也被撑开了，但是这种做法使得父级也脱离了文档流，虽然方便，但是对页面的布局不是很友好，不易维护。 </p><p>以上就是我总结的五种清除浮动的方法，可能有些地方总结不到位，有则指出，无则加冕，感谢！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在班上分享几种清除浮动的方法，讲到一半突然忘了，贼尴尬，于是自己在网上找了几种解决办法来清除浮动&lt;/p&gt;
&lt;p&gt;先看一段代码—-html&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>http深入浅出--http请求</title>
    <link href="https://www.xjt5213.club/2019/04/08/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E4%B8%80--Http%E8%AF%B7%E6%B1%82/"/>
    <id>https://www.xjt5213.club/2019/04/08/学习笔记一--Http请求/</id>
    <published>2019-04-08T02:39:39.000Z</published>
    <updated>2019-04-08T03:02:12.858Z</updated>
    
    <content type="html"><![CDATA[<p style="text-indent:2em;">HTTP(HyperText Transfer Protocol)是一套计算机通过网络进行通信的规则。计算机专家设计出HTTP，使HTTP客户（如Web浏览器）能够从HTTP服务器(Web服务器)请求信息和服务，HTTP目前协议的版本是1.1.HTTP是一种无状态的协议，无状态是指Web浏览器和Web服务器之间不需要建立持久的连接，这意味着当一个客户端向服务器端发出请求，然后Web服务器返回响应(response)，连接就被关闭了，在服务器端不保留连接的有关信息.HTTP遵循请求(Request)/应答(Response)模型。Web浏览器向Web服务器发送请求，Web服务器处理请求并返回适当的应答。所有HTTP连接都被构造成一套请求和应答。</p><p style="text-indent:2em;">HTTP使用内容类型，是指Web服务器向Web浏览器返回的文件都有与之相关的类型。所有这些类型在MIME　Internet邮件协议上模型化，即Web服务器告诉Web浏览器该文件所具有的种类，是HTML文档、GIF格式图像、声音文件还是独立的应用程序。大多数Web浏览器都拥有一系列的可配置的辅助应用程序，它们告诉浏览器应该如何处理Web服务器发送过来的各种内容类型。</p><h4 id="HTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤："><a href="#HTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤：" class="headerlink" title="HTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤："></a>HTTP通信机制是在一次完整的HTTP通信过程中，Web浏览器与Web服务器之间将完成下列7个步骤：</h4><h5 id="1-建立TCP连接"><a href="#1-建立TCP连接" class="headerlink" title="1,建立TCP连接"></a>1,建立TCP连接</h5><p>在HTTP工作开始之前，Web浏览器首先要通过网络与Web服务器建立连接，该连接是通过TCP来完成的，该协议与IP协议共同构建Internet，即著名的TCP/IP协议族，因此Internet又被称作是TCP/IP网络。HTTP是比TCP更高层次的应用层协议，根据规则，只有低层协议建立之后才能，才能进行更层协议的连接，因此，首先要建立TCP连接，一般TCP连接的端口号是80</p><h5 id="2-Web浏览器向Web服务器发送请求命令"><a href="#2-Web浏览器向Web服务器发送请求命令" class="headerlink" title="2,Web浏览器向Web服务器发送请求命令"></a>2,Web浏览器向Web服务器发送请求命令</h5><p>一旦建立了TCP连接，Web浏览器就会向Web服务器发送请求命令 例如：GET/sample/hello.jsp HTTP/1.1  </p><h5 id="3-Web浏览器发送请求头信息"><a href="#3-Web浏览器发送请求头信息" class="headerlink" title="3,Web浏览器发送请求头信息"></a>3,Web浏览器发送请求头信息</h5><p>浏览器发送其请求命令之后，还要以头信息的形式向Web服务器发送一些别的信息，之后浏览器发送了一空白行来通知服务器，它已经结束了该头信息的发送。  </p><h5 id="4-Web服务器应答"><a href="#4-Web服务器应答" class="headerlink" title="4,Web服务器应答"></a>4,Web服务器应答</h5><p>客户机向服务器发出请求后，服务器会客户机回送应答。eg:  HTTP/1.1 200 OK</p><h5 id="5，Web服务器应答头信息"><a href="#5，Web服务器应答头信息" class="headerlink" title="5，Web服务器应答头信息"></a>5，Web服务器应答头信息</h5><p>正如客户端会随同请求发送关于自身的信息一样，服务器也会随同应答向用户发送关于它自己的数据及被请求的文档。   </p><h5 id="6-Web服务器向浏览器发送数据"><a href="#6-Web服务器向浏览器发送数据" class="headerlink" title="6,Web服务器向浏览器发送数据"></a>6,Web服务器向浏览器发送数据</h5><p>Web服务器向浏览器发送头信息后，它会发送一个空白行来表示头信息的发送到此为结束，接着，它就以Content-Type应答头信息所描述的格式发送用户所请求的实际数据  </p><h5 id="7-Web服务器关闭TCP连接"><a href="#7-Web服务器关闭TCP连接" class="headerlink" title="7,Web服务器关闭TCP连接"></a>7,Web服务器关闭TCP连接</h5><p>一般情况下，一旦Web服务器向浏览器发送了请求数据，它就要关闭TCP连接，然后如果浏览器或者服务器在其头信息加入了这行代码<code>Connection:keep-alive</code> TCP连接在发送后将仍然保持打开状态，于是，浏览器可以继续通过相同的连接发送请求。保持连接节省了为每个请求建立新连接所需的时间，还节约了网络带宽。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-indent:2em;&quot;&gt;HTTP(HyperText Transfer Protocol)是一套计算机通过网络进行通信的规则。计算机专家设计出HTTP，使HTTP客户（如Web浏览器）能够从HTTP服务器(Web服务器)请求信息和服务，HTTP目前
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.xjt5213.club/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>元素js获取css样式</title>
    <link href="https://www.xjt5213.club/2019/04/08/%E5%8E%9F%E7%94%9Fjs%E8%8E%B7%E5%8F%96css%E6%A0%B7%E5%BC%8F/"/>
    <id>https://www.xjt5213.club/2019/04/08/原生js获取css样式/</id>
    <published>2019-04-08T02:39:39.000Z</published>
    <updated>2019-04-10T03:18:25.769Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写js代码的时候碰到了一个问题：用原生js并不能完全获取css样式属性。</p><h4 id="1，内部样式表情况"><a href="#1，内部样式表情况" class="headerlink" title="1，内部样式表情况"></a>1，内部样式表情况</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>].style.backgroundColor=<span class="string">"green"</span>; <span class="comment">//可以写入样式</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>].style.width);  <span class="comment">//不能够获取样式属性</span></span><br></pre></td></tr></table></figure><p><span style="background:yellow">当用内部样式表的时候用这种方式的时候只能给css写入样式，并不能获取css样式。<span></span></span></p><h4 id="2，内联样式情况"><a href="#2，内联样式情况" class="headerlink" title="2，内联样式情况"></a>2，内联样式情况</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>].style.backgroundColor=<span class="string">"green"</span>; <span class="comment">//可以写入样式</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>].style.width);  <span class="comment">//能够获取样式属性</span></span><br></pre></td></tr></table></figure><p><span style="background:yellow">当使用内部样式表的时候，采用上面的js代码既可以获取样式属性，还可以给标签写入样式，但是使用内联样式的话会使得html代码显得很繁琐，没有规则，所以不推荐。<span></span></span></p><p>后来在网上查找了一些方法，发现了几种解决办法  </p><p>方法一，使用<code>window.getComputedStyle(参数一，参数二)</code>; <code>参数一</code>：元素，<code>参数二</code>：当前元素的伪类，一般写<code>null</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> divs=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"div"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.getComputedStyle(divs,<span class="literal">null</span>).width);   <span class="comment">//获取宽度</span></span><br></pre></td></tr></table></figure><p>这个方法在ie6-8上面不兼容，获取的内容为只读，并不能写入，所以我又找了一种方法</p><p>方法二，在ie上使用currentStyle属性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在写js代码的时候碰到了一个问题：用原生js并不能完全获取css样式属性。&lt;/p&gt;
&lt;h4 id=&quot;1，内部样式表情况&quot;&gt;&lt;a href=&quot;#1，内部样式表情况&quot; class=&quot;headerlink&quot; title=&quot;1，内部样式表情况&quot;&gt;&lt;/a&gt;1，内部样式表情况&lt;/h
      
    
    </summary>
    
    
      <category term="学习笔记" scheme="https://www.xjt5213.club/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>利用oneindex将onedrive打造成一个在线查看和下载文件的网盘</title>
    <link href="https://www.xjt5213.club/2019/04/07/oneindex%E6%95%99%E7%A8%8B/"/>
    <id>https://www.xjt5213.club/2019/04/07/oneindex教程/</id>
    <published>2019-04-07T12:03:21.000Z</published>
    <updated>2019-04-07T15:07:34.541Z</updated>
    
    <content type="html"><![CDATA[<p style="text-indent:2em">之前弄了一个onedrive账号，专门用来存一些电影，容量是5T，挺大的，用oneindex来将onedrive打造成一款可以在线观看和下载视频或者文件的一个小网站最好不过了</p>  <h3 id="1，注册免费空间"><a href="#1，注册免费空间" class="headerlink" title="1，注册免费空间"></a>1，注册免费空间</h3><p>我用的是<code>000webhost</code>,所以我就拿这个来做了，附上注册链接：<a href="https://www.000webhost.com/free-website-sign-up" target="_blank" rel="noopener">https://www.000webhost.com/free-website-sign-up</a></p><p><img src="https://i.loli.net/2019/04/07/5ca9f21f438f4.png" alt="1"></p><p>填写邮箱和密码就可以注册了，是不是非常简单……..   </p><h3 id="2，网站后台"><a href="#2，网站后台" class="headerlink" title="2，网站后台"></a>2，网站后台</h3><p>接下来登陆进入后台会看到大概如图所示的样子，点击<code>Manage Websites</code>管理网站</p><p><img src="https://i.loli.net/2019/04/07/5ca9f21fe1479.png" alt="2"></p><p>点进去之后就是这个样子 ,然后点击<code>File manager</code></p><p><img src="https://i.loli.net/2019/04/07/5ca9f35903656.png" alt="3"></p><p>出现这个 </p><p><img src="https://i.loli.net/2019/04/07/5ca9f3adc47eb.png" alt="4"></p><p>点击<code>Upload files now</code> 出现下图</p><p><img src="https://i.loli.net/2019/04/07/5ca9f3f8ecdf1.png" alt="5"></p><h3 id="3，oneindex部署"><a href="#3，oneindex部署" class="headerlink" title="3，oneindex部署"></a>3，oneindex部署</h3><p>先附上oneindex下载地址:<a href="https://github.com/donwa/oneindex" target="_blank" rel="noopener">https://github.com/donwa/oneindex</a></p><p><img src="https://i.loli.net/2019/04/07/5ca9f50682eb1.png" alt="6"></p><p>下载完成后,点击这个上传按钮把刚下的压缩包上传即可  注意：是上传至<code>public_html</code>文件夹下</p><p><img src="https://i.loli.net/2019/04/07/5ca9f587a6ae3.png" alt="5">   </p><p>上传完了之后，网站目录下就会出现这个压缩包了</p><p><img src="https://i.loli.net/2019/04/07/5ca9f70899168.png" alt="7">  </p><p>然后右键单击压缩包解压</p><p><img src="https://i.loli.net/2019/04/07/5ca9f74da64c8.png" alt="8"></p><p>注意：还是解压至<code>public_html</code>目录下，可能因为某些原因压缩包解压不了，那么只能在本地解压了，然后把文件和文件夹一个一个地上传到该目录下，注意空文件夹也要上传哦</p><p>解压完或者上传完之后的文件大概是这个样子的</p><p><img src="https://i.loli.net/2019/04/07/5ca9f8423c04d.png" alt="10"></p><p>这个时候oneindex就部署完了</p><h3 id="4，oneindex设置"><a href="#4，oneindex设置" class="headerlink" title="4，oneindex设置"></a>4，oneindex设置</h3><p>点击你的网址就会看到oneindex的设置界面了</p><p><img src="https://i.loli.net/2019/04/07/5ca9f9266e7de.png" alt="11"></p><p><img src="https://www.xzymoe.com/wp-content/uploads/2018/06/oneindex-install-envi.png" alt="12"></p><p>下一步即可</p><p><img src="https://www.xzymoe.com/wp-content/uploads/2018/06/oneindex-id-secret-768x420.png" alt="13"></p><p><img src="https://raw.githubusercontent.com/donwa/oneindex/files/images/install.gif" alt="14"></p><p>然后获取应用id和机密分别填入第一栏和第二栏，第三栏不动   下一步。</p><p><img src="https://raw.githubusercontent.com/donwa/oneindex/files/images/install.gif" alt="15"></p><p>绑定账号之后刷新你的网址就可以了</p><p>安装完成后可以通过后台登录对OneIndex进行管理</p><p>后台网址：你的原有网址上+<code>/?/admin</code>即可，初次登陆需要密码，默认密码是<code>oneindex</code></p><p><img src="https://i.loli.net/2019/04/07/5ca9fbc80ab0b.png" alt="15"></p><p>上传文件到你的onedrive就可以在这个网站上同步显示了，如果是视频可以在线观看</p><h3 id="5，指定文件夹加密"><a href="#5，指定文件夹加密" class="headerlink" title="5，指定文件夹加密"></a>5，指定文件夹加密</h3><p>如果你要给你的网站加密码，只有输入密码才能访问的话，<code>win+R</code>输入<code>cmd</code></p><p>进入到你的桌面路径</p><p>在弹出的命令行输入<code>echo 你设置的密码-&gt;password</code>回车</p><p>在你的桌面会出现一个后缀为<code>.password</code>的文件，把这个文件放入你想加密的文件夹里面，到oneindex后台<code>刷新缓存</code>之后重新进入你的网站就会要求输入密码访问了。</p><h3 id="6，文件上传"><a href="#6，文件上传" class="headerlink" title="6，文件上传"></a>6，文件上传</h3><p>上传文件的话直接用onedrive上传即可，刷新你的网站即可看到上传的文件。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-indent:2em&quot;&gt;之前弄了一个onedrive账号，专门用来存一些电影，容量是5T，挺大的，用oneindex来将onedrive打造成一款可以在线观看和下载视频或者文件的一个小网站最好不过了&lt;/p&gt;  

&lt;h3 id=&quot;1，注册免费空间&quot;&gt;
      
    
    </summary>
    
    
      <category term="教程" scheme="https://www.xjt5213.club/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>自建爬梯教程</title>
    <link href="https://www.xjt5213.club/2019/04/06/%E7%88%AC%E6%A2%AF%E6%95%99%E7%A8%8B/"/>
    <id>https://www.xjt5213.club/2019/04/06/爬梯教程/</id>
    <published>2019-04-06T09:37:08.000Z</published>
    <updated>2019-04-08T09:50:56.135Z</updated>
    
    <content type="html"><![CDATA[<p style="text-indent:2em">之前自建爬梯的时候老是自己在网上找教程，非常啰嗦，所以写一篇搭建教程，为了以后的方便吧</p>  <h3 id="1，注册vps"><a href="#1，注册vps" class="headerlink" title="1，注册vps"></a>1，注册vps</h3><p style="text-indent:2em">首先你得有一个vps,至于是什么vps,本人不才，用的vultr，其实很多人都说vultr现在不好用了，过于泛滥，其实我觉得还行吧，可能是挺早之前买的缘故吧，听说后面买的比较容易被盯上。话不多说，开始上教程。</p><br><p>首先，去注册一个vultr账号，其他的vps也一样需要注册账号，附上链接：<a href="https://www.vultr.com/" title="vultr" target="_blank" rel="noopener"><code>https://www.vultr.com/</code></a>然后在下图中填上你要注册的邮箱和密码点击<code>Create Account</code>就可以了,是不是特别简单。</p><p><img src="https://i.loli.net/2019/04/06/5ca89b0d2a9b3.png" alt="注册"></p><h3 id="2，充值"><a href="#2，充值" class="headerlink" title="2，充值"></a>2，充值</h3><p><span>在注册完成之后，就要给vultr充值了，用来购买套餐，vultr充值方式比较多，支持国内的支付宝和微信支付，首次登陆之后出现的界面就是充值界面了,选择你需要的充值方式进行充值即可</span></p><p><img src="https://i.loli.net/2019/04/06/5ca89d5c2602c.png" alt="充值"><br><span>选择好充值方式和充值金额之后，点击下方的充值按钮进行支付就行了</span></p><h3 id="3，套餐选择"><a href="#3，套餐选择" class="headerlink" title="3，套餐选择"></a>3，套餐选择</h3><p><span>充值完成之后，点击左侧栏的第一个进行服务器购买</span></p><p><img src="https://i.loli.net/2019/04/06/5ca89f51efeff.png" alt="1"><br><span>1，Server Location：是选择机房的位置，一般来说是离大陆越近越好，我选择的是日本机房，根据你们的情况自行选择即可</span></p><p><img src="https://i.loli.net/2019/04/06/5ca89f53230b8.png" alt="2"><br><span>2,Server Type:是选择vps需要装的系统,一般来说选择centos或者Debian就可以了，我选择的是Debian9x64的，你们根据实际情况自行选择</span></p><p><img src="https://i.loli.net/2019/04/06/5ca89f53247a0.png" alt="3"><br><span>3,Server Size:这里选择服务器的内存和月流量，如果你是一个人用的话推荐月付$3.5的或者$5的套餐即可</span></p><p><img src="https://i.loli.net/2019/04/06/5ca89f53a2f18.png" alt="4"><br><span>上面步骤执行完之后，下面的那些内容就不用管了，直接点击最下方的Deploy now即可</span></p><p><img src="https://i.loli.net/2019/04/06/5ca8a1f5d82b5.png" alt="5"><br><span>等待几分钟之后会出现下图所示</span><br><img src="https://i.loli.net/2019/04/06/5ca8a28f1c060.png" alt="6"><br><span>点击服务器，会进入到详细页面,下图所示是一般需要了解的地方</span></p><p><img src="https://i.loli.net/2019/04/06/5ca8a417eb0de.png" alt="7"></p><h3 id="4，登陆vps后台进行配置"><a href="#4，登陆vps后台进行配置" class="headerlink" title="4，登陆vps后台进行配置"></a>4，登陆vps后台进行配置</h3><p><span>这里我们需要下载一个软件叫xshell,xftp也可以，我用的是xshell,你们根据自己的需要自行选择，附上链接<code>https://www.netsarang.com/zh/free-for-home-school/</code>这个是免费版，填上你的姓名和邮箱之后会把下载链接发送到你的邮箱进行下载即可，下载完之后安装打开,点击新建</span></p><p><img src="https://i.loli.net/2019/04/06/5ca8aacc113de.png" alt="8"><br><span>上面填入你的主机名，即IP地址，填完之后点击左侧的用户身份验证</span></p><p><img src="https://i.loli.net/2019/04/06/5ca8aaccbf6eb.png" alt="9"><br><span>验证之后会跳到另一个页面，上面填写你的用户名root，和密码（密码在vps详情页面信息可以看到，教程上面有截图），填完之后点击下方的连接即可,在之后弹出的对话框中选择一次性接受就可以了</span></p><p><img src="https://i.loli.net/2019/04/06/5ca8aacd0f250.png" alt="11"></p><p><img src="https://i.loli.net/2019/04/06/5ca8aacaa16f9.png" alt="12"><br><span>不出意外的话，右侧的命令行最下方会出现root字样的一行，说明你成功登陆了</span><br><img src="https://i.loli.net/2019/04/06/5ca8aaca130fe.png" alt="13"></p><h3 id="5，脚本安装-敲黑板，重点来了！！！！"><a href="#5，脚本安装-敲黑板，重点来了！！！！" class="headerlink" title="5，脚本安装(敲黑板，重点来了！！！！)"></a>5，脚本安装(敲黑板，重点来了！！！！)</h3><p><span>成功登陆之后，就可以开始梯子的脚本安装了，我用的是GitHub上一位大牛的一键脚本(教程最后附上链接，有需要的朋友可以去看看)，一键傻瓜式安装即可，在命令行输入以下命令然后回车安装即可</span></p><h4 id="5-1安装-amp-更新命令"><a href="#5-1安装-amp-更新命令" class="headerlink" title="5.1安装&amp;更新命令"></a>5.1安装&amp;更新命令</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -q -<span class="keyword">N</span> --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/FunctionClub/SSR-Bash-Python/master/install.<span class="keyword">sh</span> &amp;&amp; bash install.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><h4 id="5-2自检命令（没啥用，可以省略）"><a href="#5-2自检命令（没啥用，可以省略）" class="headerlink" title="5.2自检命令（没啥用，可以省略）"></a>5.2自检命令（没啥用，可以省略）</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -q -<span class="keyword">N</span> --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/FunctionClub/SSR-Bash-Python/master/self-check.<span class="keyword">sh</span> &amp;&amp; bash self-check.<span class="keyword">sh</span></span><br></pre></td></tr></table></figure><h4 id="5-3卸载命令"><a href="#5-3卸载命令" class="headerlink" title="5.3卸载命令"></a>5.3卸载命令</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -q -<span class="keyword">N</span> --<span class="keyword">no</span>-check-certificate http<span class="variable">s:</span>//raw.githubusercontent.<span class="keyword">com</span>/FunctionClub/SSR-Bash-Python/master/install.<span class="keyword">sh</span> &amp;&amp; bash install.<span class="keyword">sh</span> uninstall</span><br></pre></td></tr></table></figure><p><span>执行完上面的安装命令之后，然后在命令行输入<code>ssr</code>就可以运行脚本了,输入对应的数字就可以进行操作了</span><br><img src="https://i.loli.net/2019/04/06/5ca8b380868e7.png" alt="14"></p><p><span>输入数字6回车,会提示输入用户名，密码，流量（每输入一个都要回车哦）</span></p><p><img src="https://i.loli.net/2019/04/06/5ca8b471dca11.png" alt="15"><br><img src="https://i.loli.net/2019/04/06/5ca8b471b3092.png" alt="16"><br><img src="https://i.loli.net/2019/04/06/5ca8b4719c997.png" alt="17"><br><span>上面的步骤做完之后，一个梯子节点就生成了，往上拉一点，应该会出现下图相似的信息,复制标注的这段代码。</span><br><img src="https://i.loli.net/2019/04/06/5ca8b5d151440.png" alt="18"></p><h3 id="6，节点的使用"><a href="#6，节点的使用" class="headerlink" title="6，节点的使用"></a>6，节点的使用</h3><h4 id="6-1-手机使用"><a href="#6-1-手机使用" class="headerlink" title="6.1,手机使用"></a>6.1,手机使用</h4><p><span>如果你想在手机上使用的话。下载这个软件。下载地址：<a href="https://github.com/shadowsocksrr/shadowsocksr-latest-bin-backup/raw/master/Shadowsocksr-android-3.4.0.5.apk" target="_blank" rel="noopener"><code>https://github.com/shadowsocksrr/shadowsocksr-latest-bin-backup/raw/master/Shadowsocksr-android-3.4.0.5.apk</code></a>下载完成后打开</span></p><p><img src="https://i.loli.net/2019/04/06/5ca8b9870959c.png" alt="19"></p><p><span>点击右下角+号，有个从剪切板导入，把刚刚复制的代码导入就行了，注意路由选择绕过局域网及中国大陆地址，不然访问国内的软件也会走vps流量哦</span></p><h4 id="6-2，电脑使用"><a href="#6-2，电脑使用" class="headerlink" title="6.2，电脑使用"></a>6.2，电脑使用</h4><p><span>如果你想在电脑上使用的话。下载这个软件。下载地址：<a href="https://github.com/shadowsocksrr/shadowsocksr-csharp/releases/download/4.9.0/ShadowsocksR-win-4.9.0.zip" target="_blank" rel="noopener"><code>https://github.com/shadowsocksrr/shadowsocksr-csharp/releases/download/4.9.0/ShadowsocksR-win-4.9.0.zip</code></a>下载完成后解压，打开解压的文件夹，双击如图所示的图标之后右下角的任务栏会有小飞机的图标，鼠标右键单击这个图标，会有剪切板批量导入ssr:链接，还是复制刚才那段代码选择导入即可，导入完成之后注意系统代理模式选择PAC,代理规则选择绕过局域网和大陆即可</span><br><img src="https://i.loli.net/2019/04/06/5ca8bb32df989.png" alt="20"></p><p><img src="https://i.loli.net/2019/04/06/5ca8bd7b71a68.png" alt="21"></p><h4>本教程的一键安装脚本由GitHub大佬提供，附上大佬链接<a href="https://github.com/FunctionClub/SSR-Bash-Python" target="_blank" rel="noopener"><code>https://github.com/FunctionClub/SSR-Bash-Python</code></a>有需要的朋友可以去看看哦</h4><h4>本人第一次写教程，写的不好的地方欢迎在下方提出，以便以后可以改进，感谢哦</h4>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-indent:2em&quot;&gt;之前自建爬梯的时候老是自己在网上找教程，非常啰嗦，所以写一篇搭建教程，为了以后的方便吧&lt;/p&gt;  

&lt;h3 id=&quot;1，注册vps&quot;&gt;&lt;a href=&quot;#1，注册vps&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
    
      <category term="教程" scheme="https://www.xjt5213.club/tags/%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>开篇随笔</title>
    <link href="https://www.xjt5213.club/2019/04/01/%E5%BC%80%E7%AF%87%E9%9A%8F%E7%AC%94/"/>
    <id>https://www.xjt5213.club/2019/04/01/开篇随笔/</id>
    <published>2019-04-01T09:19:37.000Z</published>
    <updated>2019-04-05T05:08:23.057Z</updated>
    
    <content type="html"><![CDATA[<p style="text-indent:2em">历经了各种艰难险阻（其实是自己太水），才完成这个blog的搭建，可以说是一个小小白了，搭建的过程中各种碰壁，不过最终还是完了，感觉内心还是蛮有成就感的，最近在开始接触前端知识，以后这个地方就作为我写一点学习笔记的地方吧，分享算不上，前面说了是小小白哈哈哈。</p><br><p style="text-indent:2em">目前大四，正处于找工作的黄金时期，其实静下心来学习是一件非常不容易的事情，当你的同学室友都纷纷出去找工作实习去了，而你还在上课，其实我的内心是非常焦灼的，然而没办法。只恨当初在学校的时候没有好好学习，手动留下悔恨的泪水表情包。</p><br><p style="text-indent:2em">至于为什么选择入前端这个行业，其实我自己也说不清，通俗点来讲的话是比较容易入门吧。其实在这之前自学过一段时间java，说说自学的感想吧，每天看视频，码代码，刚开始还是挺有兴趣的，可是到后来慢慢的就坚持不下去了，没有学习的氛围真的会让我坚持不下去，不知道你们会不会这样，就这样自学了不到一个月就不了了之了，然后就转前端了。。。。</p><br><p style="text-indent:2em">再讲一下去年秋招面试的各种经历吧，总结成四个字就是四处碰壁。当时刚开始的想法是找一个开发岗位的工作，信心满满，没错是梁静茹给我的勇气，跑各大学校的招聘会，在现场跟面试官交流的过程中，面试官问我有没有做过项目，我说没有。。。。。然后又问了一些关于框架的知识，我都是一脸懵，然后把简历留在那里说等通知，自己灰溜溜的走了，后来才意识到自己在这方面的不足，基本上每次面试都逃不过这两个问题。当时就感觉有点人生充满了绝望，当时是出于这样一种情况，想找一个好工作，可是水平又打不到。后来于是降低了标准，不找开发岗了，找一个技术支持岗吧，又开始在各大招聘网站上广撒网，等面试通知，后来找到一个相关工作，整天坐在电脑面前帮客户解决各种售前售后问题，一个人得照看三台电脑，工作了刚好一个星期，突然某一天快下班的时候被人事经理叫过去谈话，说我一个人照看三台电脑有点吃力，可能是不太适合这份工作，so……我第一次被炒……也没有很失望，本来我自己就不喜欢那份工作，无所谓。然后就回家过年了哈哈哈哈，心真大。说真的 ，找一份自己感兴趣的工作真的非常重要。诶！不说了，都是泪。</p><br><p style="text-indent:2em">其实我感觉我对计算机挺感兴趣的，每次做完一个东西都感觉特别有成就感，尽管在某些大牛眼里是一个非常普通的东西。但是同时也不知道自己是不是真的适合干这个行业，还是那句话，不管结果如何，自己尽力了就好。</p><p>ps:不知道写点啥了，以后想起来再写吧，希望最后活成自己想要的样子。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p style=&quot;text-indent:2em&quot;&gt;历经了各种艰难险阻（其实是自己太水），才完成这个blog的搭建，可以说是一个小小白了，搭建的过程中各种碰壁，不过最终还是完了，感觉内心还是蛮有成就感的，最近在开始接触前端知识，以后这个地方就作为我写一点学习笔记的地方吧，分享算
      
    
    </summary>
    
    
  </entry>
  
</feed>
